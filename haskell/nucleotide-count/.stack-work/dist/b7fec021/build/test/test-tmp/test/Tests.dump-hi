
==================== FINAL INTERFACE ====================
2016-12-24 00:18:06.4658414 UTC

interface main@main:Main 8001
  interface hash: 9be01ba4995e14a1b7b7ddc699b19183
  ABI hash: 3cb5e0675cb0ca9e76763593168828d8
  export-list hash: ae301943ab078a68297f022b2b2e9810
  orphan hash: 251fcbcb8a0b69c8eb1dca6e0891c68f
  flag hash: c5fd8a7e79486d642b6ae78bff279209
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.main
module dependencies:
package dependencies: HUnit-1.3.1.2@HUnit-1.3.1.2-LggooYwT1UPHSoNYWvAdgk
                      QuickCheck-2.8.2@QuickCheck-2.8.2-B7cXgOk7OAiKrNRsk2SfuA
                      Win32-2.3.1.1@Win32-2.3.1.1
                      ansi-terminal-0.6.2.3@ansi-terminal-0.6.2.3-DlzOk98pOsTIrg6vAjszFA
                      array-0.5.1.1@array-0.5.1.1
                      async-2.1.0@async-2.1.0-J6Pl8k3L4PKGEpjYdgwiIf base-4.9.0.0
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0 ghc-boot-th-8.0.1@ghc-boot-th-8.0.1
                      ghc-prim-0.5.0.0 hspec-2.2.4@hspec-2.2.4-2JHkrOy68MoFruTPHbCUnA
                      hspec-core-2.2.4@hspec-core-2.2.4-EKkyFqjPJqS7XEtkjBuz9r
                      hspec-expectations-0.7.2@hspec-expectations-0.7.2-2hcUzmYSxY99w7X9aRVhtQ
                      integer-gmp-1.0.0.1
                      nucleotide-count-0.0.0@nucleotide-count-0.0.0-LnIjeFZp0SF6K8oWePf1A
                      pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa
                      quickcheck-io-0.1.4@quickcheck-io-0.1.4-FBS8bJQDuy67pt2mrEjbcq
                      random-1.1@random-1.1-54KmMHXjttlERYcr1mvsAe
                      setenv-0.1.1.3@setenv-0.1.1.3-LcnHiP6T48k9K5OKepjQ1q
                      stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF
                      template-haskell-2.11.0.0
                      tf-random-0.5@tf-random-0.5-4z8OJUaXC1FRNfrLPFWAD
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
         quickcheck-io-0.1.4@quickcheck-io-0.1.4-FBS8bJQDuy67pt2mrEjbcq:Test.QuickCheck.IO
         stm-2.4.4.1@stm-2.4.4.1-4z2NRWnB0NIIUvSJsHW0kF:Control.Monad.STM
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Complex base-4.9.0.0:Data.Either
                         base-4.9.0.0:Data.Functor.Const base-4.9.0.0:Data.Functor.Identity
                         base-4.9.0.0:Data.List.NonEmpty base-4.9.0.0:Data.Monoid
                         base-4.9.0.0:Data.Semigroup base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:Data.Version base-4.9.0.0:Data.Void
                         base-4.9.0.0:GHC.Exts base-4.9.0.0:GHC.Generics
                         base-4.9.0.0:GHC.IO.Exception base-4.9.0.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.1@ghc-boot-th-8.0.1:GHC.LanguageExtensions.Type
                         hspec-core-2.2.4@hspec-core-2.2.4-EKkyFqjPJqS7XEtkjBuz9r:Test.Hspec.Core.Example
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.1.0@primitive-0.6.1.0-Ip44DqhfCp21tTUYbecwa:Control.Monad.Primitive
                         template-haskell-2.11.0.0:Language.Haskell.TH.Syntax
import  -/  base-4.9.0.0:Data.Either 4cef602ce360a0155ac0dd580a5b4863
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map 59ba4f128d7d19046010538c416f3875
import  -/  containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base d6db6ac95571c976686f97c64548b060
import  -/  ghc-prim-0.5.0.0:GHC.Types 7378e41b7749213c8c88ceb6b0665d4c
import  -/  hspec-2.2.4@hspec-2.2.4-2JHkrOy68MoFruTPHbCUnA:Test.Hspec 6f4f87bf3181fc09cdaef39c9770e8cd
import  -/  hspec-2.2.4@hspec-2.2.4-2JHkrOy68MoFruTPHbCUnA:Test.Hspec.Runner 07bd5b8f441fc8d905cac0439b0a7e36
import  -/  hspec-core-2.2.4@hspec-core-2.2.4-EKkyFqjPJqS7XEtkjBuz9r:Test.Hspec.Core.Runner b03bd0dbd7dff15473cadb57650a40e0
import  -/  hspec-core-2.2.4@hspec-core-2.2.4-EKkyFqjPJqS7XEtkjBuz9r:Test.Hspec.Core.Spec 206294133a97b279277f038a12d11187
import  -/  hspec-core-2.2.4@hspec-core-2.2.4-EKkyFqjPJqS7XEtkjBuz9r:Test.Hspec.Core.Spec.Monad 5c22334405380a81c0f8e2fd23a00114
import  -/  hspec-core-2.2.4@hspec-core-2.2.4-EKkyFqjPJqS7XEtkjBuz9r:Test.Hspec.Options 22c5799b663e0255f7882b4902f8f366
import  -/  hspec-expectations-0.7.2@hspec-expectations-0.7.2-2hcUzmYSxY99w7X9aRVhtQ:Test.Hspec.Expectations 0e73130bc0a821a48afa4149485fdd75
import  -/  nucleotide-count-0.0.0@nucleotide-count-0.0.0-LnIjeFZp0SF6K8oWePf1A:DNA 1e717922b95622671a5b73af809bc256
6cd8e7f841081c00c90ae8b3e07ce5ff
  $s$fEqEither ::
    GHC.Classes.Eq (Data.Either.Either GHC.Base.String GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either GHC.Base.String GHC.Types.Int)
                  (Data.Either.$fEqEither_$c==
                     @ GHC.Base.String
                     @ GHC.Types.Int
                     Main.$s$fEqEither1
                     GHC.Classes.$fEqInt)
                  (Data.Either.$fEqEither_$c/=
                     @ GHC.Base.String
                     @ GHC.Types.Int
                     Main.$s$fEqEither1
                     GHC.Classes.$fEqInt) -}
e6f318edbded7f55477d0613ee85dc01
  $s$fEqEither1 :: GHC.Classes.Eq GHC.Base.String
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Classes.$fEq[]_$s$fEq[]1 -}
d84d5122fd8058570fb1b6e96a344f98
  $s$fEqEither2 ::
    GHC.Classes.Eq
      (Data.Either.Either
         GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int))
                  (Data.Either.$fEqEither_$c==
                     @ GHC.Base.String
                     @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                     Main.$s$fEqEither1
                     Main.$s$fEqEither3)
                  (Data.Either.$fEqEither_$c/=
                     @ GHC.Base.String
                     @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                     Main.$s$fEqEither1
                     Main.$s$fEqEither3) -}
b113e37adb8f4e70859a2bdae252e916
  $s$fEqEither3 ::
    GHC.Classes.Eq (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fEqEither_$s$fEqMap -}
b7cf6118bfe988eb777d26dc026eb607
  $s$fEqEither4 :: GHC.Classes.Eq GHC.Types.Char
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True) GHC.Classes.$fEqChar -}
891ff51dc1b963b4492ff0d413b3fe2b
  $s$fEqEither_$s$fEqMap ::
    GHC.Classes.Eq (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                  (Data.Map.Base.$fEqMap_$c==
                     @ GHC.Types.Char
                     @ GHC.Types.Int
                     Main.$s$fEqEither4
                     GHC.Classes.$fEqInt)
                  Main.$s$fEqEither_$s$fEqMap_$c/= -}
b25117e2bd1d71f16e1095a20a8b88f3
  $s$fEqEither_$s$fEqMap_$c/= ::
    Data.Map.Base.Map GHC.Types.Char GHC.Types.Int
    -> Data.Map.Base.Map GHC.Types.Char GHC.Types.Int -> GHC.Types.Bool
  {- Arity: 2, Strictness: <L,U><L,U>, Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                   (y :: Data.Map.Base.Map GHC.Types.Char GHC.Types.Int) ->
                 GHC.Classes.not
                   (Data.Map.Base.$fEqMap_$c==
                      @ GHC.Types.Char
                      @ GHC.Types.Int
                      Main.$s$fEqEither4
                      GHC.Classes.$fEqInt
                      x
                      y)) -}
88547a84d8c6ccc8e63a214692214285
  $s$fShowEither ::
    GHC.Show.Show (Data.Either.Either GHC.Base.String GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either GHC.Base.String GHC.Types.Int)
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ GHC.Base.String
                     @ GHC.Types.Int
                     Main.$s$fShowEither3
                     GHC.Show.$fShowInt)
                  (Data.Either.$fShowEither_$cshow
                     @ GHC.Base.String
                     @ GHC.Types.Int
                     Main.$s$fShowEither3
                     GHC.Show.$fShowInt)
                  Main.$s$fShowEither1 -}
d87e05255d56c07a2a11d877a1aab607
  $s$fShowEither1 ::
    [Data.Either.Either GHC.Base.String GHC.Types.Int]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (eta :: [Data.Either.Either
                              GHC.Base.String GHC.Types.Int])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either GHC.Base.String GHC.Types.Int)
                   Main.$s$fShowEither2
                   eta
                   eta1) -}
5af73c7eeb6d862f88c23164c267fd08
  $s$fShowEither2 ::
    Data.Either.Either GHC.Base.String GHC.Types.Int -> GHC.Show.ShowS
  {- Arity: 1,
     Unfolding: (\ (w3 :: Data.Either.Either
                            GHC.Base.String GHC.Types.Int) ->
                 Data.Either.$w$cshowsPrec
                   @ GHC.Base.String
                   @ GHC.Types.Int
                   GHC.Show.$fShow[]_$s$fShow[]1
                   GHC.Show.$fShowInt
                   0#
                   w3) -}
ebccafb416556612d08e84fb1faca126
  $s$fShowEither3 :: GHC.Show.Show GHC.Base.String
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                GHC.Show.$fShow[]_$s$fShow[]1 -}
ff0e48d9dcdc9601c55f76f21d17952b
  $s$fShowEither4 ::
    GHC.Show.Show
      (Data.Either.Either
         [GHC.Types.Char] (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int))
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Either.Either
                       [GHC.Types.Char] (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int))
                  (Data.Either.$fShowEither_$cshowsPrec
                     @ [GHC.Types.Char]
                     @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                     Main.$s$fShowEither3
                     Main.$s$fShowEither_$dShow1)
                  (Data.Either.$fShowEither_$cshow
                     @ [GHC.Types.Char]
                     @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                     Main.$s$fShowEither3
                     Main.$s$fShowEither_$dShow1)
                  Main.$s$fShowEither5 -}
42fad417ae4265dc800f707d2c6af97e
  $s$fShowEither5 ::
    [Data.Either.Either
       [GHC.Types.Char] (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)]
    -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (eta :: [Data.Either.Either
                              [GHC.Types.Char] (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Either.Either
                        [GHC.Types.Char] (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int))
                   Main.$s$fShowEither6
                   eta
                   eta1) -}
2b0df87ef5b434c7e03f08031578a1e0
  $s$fShowEither6 ::
    Data.Either.Either
      [GHC.Types.Char] (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
    -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (w3 :: Data.Either.Either
                            [GHC.Types.Char]
                            (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)) ->
                 Data.Either.$w$cshowsPrec
                   @ [GHC.Types.Char]
                   @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                   GHC.Show.$fShow[]_$s$fShow[]1
                   Main.$s$fShowEither_$s$fShowMap
                   0#
                   w3) -}
0c83019489491c2ce7fce5400aff4785
  $s$fShowEither_$dShow1 ::
    GHC.Show.Show (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Strictness: m,
     Unfolding: InlineRule (0, True, True)
                Main.$s$fShowEither_$s$fShowMap -}
289b10e8779e9f71fa9d56c0d51be67a
  $s$fShowEither_$s$fShowMap ::
    GHC.Show.Show (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                  (Data.Map.Base.$fShowMap_$cshowsPrec
                     @ GHC.Types.Char
                     @ GHC.Types.Int
                     GHC.Show.$fShowChar
                     GHC.Show.$fShowInt)
                  (Data.Map.Base.$fShowMap_$cshow
                     @ GHC.Types.Char
                     @ GHC.Types.Int
                     GHC.Show.$fShowChar
                     GHC.Show.$fShowInt)
                  Main.$s$fShowEither_$s$fShowMap_$cshowList -}
f5342bbb87b3993046f294e67b827564
  $s$fShowEither_$s$fShowMap_$cshowList ::
    [Data.Map.Base.Map GHC.Types.Char GHC.Types.Int] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Data.Map.Base.Map GHC.Types.Char GHC.Types.Int])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                   (Data.Map.Base.$fShowMap_$cshowsPrec
                      @ GHC.Types.Char
                      @ GHC.Types.Int
                      GHC.Show.$fShowChar
                      GHC.Show.$fShowInt
                      GHC.Show.shows22)
                   ls
                   s) -}
13aac2ef59f18034e3cdabf0e1efe25e
  $sfromList ::
    [(GHC.Types.Char, a)] -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ @ a (ds :: [(GHC.Types.Char, a)]) ->
                 case ds of wild {
                   [] -> Data.Map.Base.Tip @ GHC.Types.Char @ a
                   : ds1 ds2
                   -> case ds1 of wild1 { (,) kx x ->
                      case ds2 of wild2 {
                        []
                        -> case kx of dt { GHC.Types.C# ipv ->
                           Data.Map.Base.Bin
                             @ GHC.Types.Char
                             @ a
                             1#
                             dt
                             x
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                             (Data.Map.Base.Tip @ GHC.Types.Char @ a) }
                        : ipv ipv1
                        -> case ipv of wild3 { (,) ky ds3 ->
                           case kx of wild4 { GHC.Types.C# c1 ->
                           case ky of wild5 { GHC.Types.C# c2 ->
                           case GHC.Prim.tagToEnum#
                                  @ GHC.Types.Bool
                                  (GHC.Prim.geChar# c1 c2) of wild6 {
                             GHC.Types.False
                             -> Main.$wpoly_go10
                                  @ a
                                  1#
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2
                             GHC.Types.True
                             -> Main.$sfromList1
                                  @ a
                                  (Data.Map.Base.Bin
                                     @ GHC.Types.Char
                                     @ a
                                     1#
                                     wild4
                                     x
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a)
                                     (Data.Map.Base.Tip @ GHC.Types.Char @ a))
                                  wild2 } } } } } } }) -}
ad521ee28f13d2525043ebe5cfb7d2ab
  $sfromList1 ::
    Data.Map.Base.Map GHC.Types.Char a1
    -> [(GHC.Types.Char, a1)] -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
d6831ef04cb9301b090dfae6f7bb7ec7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule2 Main.$trModule1) -}
847d9fc3b8e6f0b424199f36b4999bb2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Main"#) -}
24ef6042833e75ffd7aa98b83ecca98d
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
e37f4918c60eaa41c18c4043c39a4b2e
  $w$sgo10 ::
    GHC.Prim.Char#
    -> a1
    -> Data.Map.Base.Map GHC.Types.Char a1
    -> Data.Map.Base.Map GHC.Types.Char a1
  {- Arity: 3, Strictness: <L,U><L,U><S,1*U>, Inline: [0] -}
9d49cbf32b69cc538281222508bcbaca
  $wpoly_go10 ::
    GHC.Prim.Int#
    -> Data.Map.Base.Map GHC.Types.Char a
    -> [(GHC.Types.Char, a)]
    -> Data.Map.Base.Map GHC.Types.Char a
  {- Arity: 3, Strictness: <L,U><S,1*U><S,1*U>, Inline: [0] -}
99807908f6a46f1201ae6d63c846a35e
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
341086d344763c85216882982df956b2
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 case Test.Hspec.Core.Runner.hspec2
                        Main.main189
                        Main.main2
                          `cast`
                        (Trans
                             (Sym (GHC.Types.N:IO[0]
                                       <((), [Test.Hspec.Core.Tree.SpecTree ()])>_R))
                             (Trans
                                  (Sym (Control.Monad.Trans.Writer.Lazy.N:WriterT[0]
                                            <[Test.Hspec.Core.Tree.SpecTree ()]>_N
                                            <GHC.Types.IO>_R
                                            <()>_N))
                                  (Sym (Test.Hspec.Core.Spec.Monad.N:SpecM[0] <()>_N) <()>_N)))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { Test.Hspec.Core.Runner.Summary ds ds2 ->
                 case ds2 of wild1 { GHC.Types.I# x ->
                 case x of wild2 {
                   DEFAULT -> System.Exit.die2 @ () ipv
                   0# -> (# ipv, GHC.Tuple.() #) } } } }) -}
9485452552d4707fa0a2367257b5e2d7
  main10 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main68
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main11) -}
2225b537690859f011fef874c2065c2f
  main100 ::
    Data.Either.Either
      GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Unfolding: (DNA.nucleotideCounts
                   (GHC.Types.[] @ GHC.Types.Char)) -}
87a92972fa23803e4448ca73a97dc265
  main101 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "empty dna strand has no nucleotides"#) -}
d1a2cfb80c2d0e860ac20e65318a4dfb
  main102 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main103) -}
4d55e4fb2f73368b0eeb0e4886e3bdd8
  main103 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main34
                   Main.main104
                   GHC.Stack.Types.EmptyCallStack) -}
6534671d8c0699e929660f8b4e7a22c4
  main104 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main105
                   Main.main32
                   Main.main105
                   Main.main67) -}
3ec6812e756a36df07094df0d9a4e46f
  main105 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 41#) -}
e03b20448999ad83708d219850358cf7
  main106 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main108
                   Main.main107) -}
6245a63cf3eca75137000370a2ed32f5
  main107 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ucleotideCounts"#) -}
4b8053ebd2ec0221f1b58a47f6448c51
  main108 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'n'#) -}
c4e31fe189926823cd88ec5f484e165c
  main109 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main184
                   Main.main110) -}
d03250dce7350be13cb024c03079aec3
  main11 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main35
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main12
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
78d97c24828bbcf269f9884eef87cf4a
  main110 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main173
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main111) -}
a3f43e200059f744b865fea3fc9be2b6
  main111 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main160
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main112) -}
7cf1c9b1582bdffa546911c196b871f4
  main112 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main145
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main113) -}
375d8b7fdc246a010a9f71a7bf1325c8
  main113 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main129
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main114
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R) -}
7935cee8800fcb3317823954048bdc09
  main114 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main115
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
6ee4f935aa85bbed001b4227d799f6b1
  main115 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (case Test.Hspec.Core.Tree.$wspecItem
                        @ Test.Hspec.Expectations.Expectation
                        Main.main125
                          `cast`
                        (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                        Test.Hspec.Core.Example.$fExampleIO1
                          `cast`
                        (Trans
                             (<Test.Hspec.Expectations.Expectation>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.Hspec.Expectations.Expectation>_N)))
                        Main.main27
                        Main.main116
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R)) of ww { Unit# ww1 ->
                 Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   ww1 }) -}
9ddb5d3e356c90e9d78e8208f6dd4344
  main116 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (eta2 :: GHC.Prim.State#
                              GHC.Prim.RealWorld)[OneShot] ->
                 case DNA.$wcount 'G'# Main.main124 of wild {
                   Data.Either.Left ds1 -> (# eta2, GHC.Tuple.() #)
                   Data.Either.Right ds1
                   -> (Test.HUnit.Lang.assertFailure
                         Main.main117
                           `cast`
                         (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                         (GHC.CString.unpackAppendCString#
                            "predicate failed on: "#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Data.Either.$fShowEither2
                               (case ds1 of ww2 { GHC.Types.I# ww3 ->
                                case GHC.Show.$wshowSignedInt
                                       11#
                                       ww3
                                       (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        eta2 }) -}
ca0f5d61661bf9cd04fe58db39a16857
  main117 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.expectationFailure8
                   Test.Hspec.Expectations.expectationFailure1
                   Main.main118) -}
73997b8c4d6b36e548263f079ac38ad2
  main118 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe10
                   Test.Hspec.Expectations.shouldBe7
                   Main.main119) -}
399fb5573b416b8149db399b28951c53
  main119 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldSatisfy2
                   Main.main120) -}
ecf790e98a94f431fbbfb81611f2c78d
  main12 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main13
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
4a9ee5bc8a06155d580745794f4a6927
  main120 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main25
                   Main.main121
                   GHC.Stack.Types.EmptyCallStack) -}
7f9c2d910f35bd3739e01eb16704cee0
  main121 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main123
                   Main.main20
                   Main.main123
                   Main.main122) -}
38aa6657875cfba6fb2ad32aca8bf076
  main122 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 55#) -}
02269aef275d53f97c0fcd51a802fdf0
  main123 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 37#) -}
0e8bf1a265b6f6b20608ec64156144b5
  main124 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GACYT"#) -}
ee783c63b724ef2eb8667d9265ff0fda
  main125 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main126) -}
4f7cb5d630d0274e0db4406856c1eb28
  main126 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main34
                   Main.main127
                   GHC.Stack.Types.EmptyCallStack) -}
5aa707787b79bb7888fd96fab93c881f
  main127 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main128
                   Main.main32
                   Main.main128
                   Main.main31) -}
805c59421d60422d3baeb1efed7d0dd8
  main128 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 36#) -}
46093c0411374c0b9b17a50d2b9e4d08
  main129 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main130
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
618945fbdbfb7f8bea431aeaf822ceb8
  main13 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (case Test.Hspec.Core.Tree.$wspecItem
                        @ Test.Hspec.Expectations.Expectation
                        Main.main28
                          `cast`
                        (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                        Test.Hspec.Core.Example.$fExampleIO1
                          `cast`
                        (Trans
                             (<Test.Hspec.Expectations.Expectation>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.Hspec.Expectations.Expectation>_N)))
                        Main.main27
                        Main.main14
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R)) of ww { Unit# ww1 ->
                 Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   ww1 }) -}
20edbbed73ecb4fc36484c78370a325d
  main130 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (case Test.Hspec.Core.Tree.$wspecItem
                        @ Test.Hspec.Expectations.Expectation
                        Main.main140
                          `cast`
                        (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                        Test.Hspec.Core.Example.$fExampleIO1
                          `cast`
                        (Trans
                             (<Test.Hspec.Expectations.Expectation>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.Hspec.Expectations.Expectation>_N)))
                        Main.main139
                        Main.main131
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R)) of ww { Unit# ww1 ->
                 Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   ww1 }) -}
be605c3405acabf41aba50400551e9be
  main131 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (eta2 :: GHC.Prim.State#
                              GHC.Prim.RealWorld)[OneShot] ->
                 case DNA.$wcount 'X'# Main.main138 of wild {
                   Data.Either.Left ds1 -> (# eta2, GHC.Tuple.() #)
                   Data.Either.Right ds1
                   -> (Test.HUnit.Lang.assertFailure
                         Main.main132
                           `cast`
                         (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                         (GHC.CString.unpackAppendCString#
                            "predicate failed on: "#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Data.Either.$fShowEither2
                               (case ds1 of ww2 { GHC.Types.I# ww3 ->
                                case GHC.Show.$wshowSignedInt
                                       11#
                                       ww3
                                       (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                GHC.Types.: @ GHC.Types.Char ww5 ww6 } }))))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        eta2 }) -}
bf9f6bde4f3b576d8c9ae38a2d383d7b
  main132 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.expectationFailure8
                   Test.Hspec.Expectations.expectationFailure1
                   Main.main133) -}
b17db62691e75e8cb8f45c518d97ec02
  main133 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe10
                   Test.Hspec.Expectations.shouldBe7
                   Main.main134) -}
5647ee27dbc0d8fe63ac7d889a29a09b
  main134 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldSatisfy2
                   Main.main135) -}
d716bd1ca15e30c34dddc5e881844558
  main135 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main25
                   Main.main136
                   GHC.Stack.Types.EmptyCallStack) -}
e4511c732dfb138e63c82348f292ea48
  main136 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main31
                   Main.main20
                   Main.main31
                   Main.main137) -}
21917b6768ca88b34dbb4be50982c04e
  main137 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 54#) -}
e04b4606e72065f52f0b98e838d6dba6
  main138 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GACT"#) -}
057f1dc72f641b8e77cec8985e8dcaa1
  main139 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "validates nucleotides"#) -}
0989aa01169f0c24ba4f1fdb319230ac
  main14 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (eta2 :: GHC.Prim.State#
                              GHC.Prim.RealWorld)[OneShot] ->
                 case DNA.nucleotideCounts Main.main26 of wild {
                   Data.Either.Left ds1 -> (# eta2, GHC.Tuple.() #)
                   Data.Either.Right ds1
                   -> (Test.HUnit.Lang.assertFailure
                         Main.main15
                           `cast`
                         (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                         (GHC.CString.unpackAppendCString#
                            "predicate failed on: "#
                            (GHC.Base.++
                               @ GHC.Types.Char
                               Data.Either.$fShowEither2
                               (Data.Map.Base.$w$cshowsPrec
                                  @ GHC.Types.Char
                                  @ GHC.Types.Int
                                  GHC.Show.$fShowChar
                                  GHC.Show.$fShowInt
                                  11#
                                  ds1
                                  (GHC.Types.[] @ GHC.Types.Char)))))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        eta2 }) -}
c5ff239f305a20e2066d44159ffe52a2
  main140 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main141) -}
3523b389e8e1d804a4e0793de3a6cd16
  main141 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main34
                   Main.main142
                   GHC.Stack.Types.EmptyCallStack) -}
acd194022d9939f9dd6fb2d0375be558
  main142 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main144
                   Main.main32
                   Main.main144
                   Main.main143) -}
46c9194080f64e787b70a3666aedf75e
  main143 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 39#) -}
58fdacceb4f1f8a1af3ea4a5fca746a1
  main144 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 33#) -}
5e95704b62b12ab2ead141cdf9c2b55c
  main145 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main146
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
701e4b22cee76625aa31dffcd2243909
  main146 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (case Test.Hspec.Core.Tree.$wspecItem
                        @ Test.Hspec.Expectations.Expectation
                        Main.main156
                          `cast`
                        (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                        Test.Hspec.Core.Example.$fExampleIO1
                          `cast`
                        (Trans
                             (<Test.Hspec.Expectations.Expectation>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.Hspec.Expectations.Expectation>_N)))
                        Main.main155
                        Main.main147
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R)) of ww { Unit# ww1 ->
                 Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   ww1 }) -}
59804029f87f10b602ce6d0ddc851380
  main147 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 Test.Hspec.Expectations.shouldBe1
                   @ (Data.Either.Either GHC.Base.String GHC.Types.Int)
                   Main.main152
                     `cast`
                   (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fShowEither
                   Main.$s$fEqEither
                   Main.main150
                   Main.main148
                   eta) -}
644452d9185244b9882a29fe38577fae
  main148 :: Data.Either.Either GHC.Base.String GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ GHC.Base.String
                   @ GHC.Types.Int
                   Main.main149) -}
f4df8fcec4edb1bcee55420acfa9c9e7
  main149 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 1#) -}
91dfa366832c772ad0d234741d4011f6
  main15 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.expectationFailure8
                   Test.Hspec.Expectations.expectationFailure1
                   Main.main16) -}
070606318d29b16956456741b6c02160
  main150 :: Data.Either.Either GHC.Base.String GHC.Types.Int
  {- Unfolding: (DNA.$wcount 'T'# Main.main151) -}
380bc1b3bfebb44116bc3a2e148905f9
  main151 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GGGGGTAACCCGG"#) -}
534c5104c9339e657497681f3ec6a81c
  main152 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main61
                   Main.main153
                   GHC.Stack.Types.EmptyCallStack) -}
654a425b91e33937e2e1f1b561df0bc3
  main153 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main154
                   Main.main31
                   Main.main154
                   Main.main122) -}
4e5053ee9406971e9c53298a5092c628
  main154 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 19#) -}
7c1b2cee8cab457012cae16cb9384315
  main155 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "counts only thymidine"#) -}
1d4d4556ef4c8231ad8382872397429b
  main156 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main157) -}
8dfbddfe5494a85a9f7a24c1490277d9
  main157 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main34
                   Main.main158
                   GHC.Stack.Types.EmptyCallStack) -}
35572cf93fc4e6f2a05c62b6035db84d
  main158 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main159
                   Main.main32
                   Main.main159
                   Main.main143) -}
caa94935b697af686081cb0088fcd702
  main159 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 30#) -}
45a5a333ecdb76d189f775804867a09e
  main16 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe10
                   Test.Hspec.Expectations.shouldBe7
                   Main.main17) -}
add9bf61b174e5f1af119a7ac5d2d9ae
  main160 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main161
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
122a52e56d504352f620262a2bf775a8
  main161 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (case Test.Hspec.Core.Tree.$wspecItem
                        @ Test.Hspec.Expectations.Expectation
                        Main.main168
                          `cast`
                        (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                        Test.Hspec.Core.Example.$fExampleIO1
                          `cast`
                        (Trans
                             (<Test.Hspec.Expectations.Expectation>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.Hspec.Expectations.Expectation>_N)))
                        Main.main167
                        Main.main162
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R)) of ww { Unit# ww1 ->
                 Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   ww1 }) -}
486c3420617362b30c5bcf543ec866b3
  main162 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 Test.Hspec.Expectations.shouldBe1
                   @ (Data.Either.Either GHC.Base.String GHC.Types.Int)
                   Main.main152
                     `cast`
                   (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fShowEither
                   Main.$s$fEqEither
                   Main.main165
                   Main.main163
                   eta) -}
6ad87f0296c5cefd5cc1a381683d68c1
  main163 :: Data.Either.Either GHC.Base.String GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ GHC.Base.String
                   @ GHC.Types.Int
                   Main.main164) -}
7ca82c63ff7fcf69304dc2bcc824d271
  main164 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 5#) -}
4af86f52d11fc9c67c5d0a71af31c341
  main165 :: Data.Either.Either GHC.Base.String GHC.Types.Int
  {- Unfolding: (DNA.$wcount 'C'# Main.main166) -}
338f23af846831f2b55be276234133c5
  main166 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CCCCC"#) -}
9d6cf84d13cfbd4d52960b47ca35b4f1
  main167 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "repetitive cytidine gets counted"#) -}
15d543eb88bc53314b8d9897eec69911
  main168 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main169) -}
84ca9317ffa631b2b12c2d91421e790c
  main169 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main34
                   Main.main170
                   GHC.Stack.Types.EmptyCallStack) -}
465b4c7d95c4a7cb3b4202bb9bdbef04
  main17 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Expectations.shouldBe6
                   Test.Hspec.Expectations.shouldSatisfy2
                   Main.main18) -}
80a917d668f6be3b92c0ed46b78d32a1
  main170 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main172
                   Main.main32
                   Main.main172
                   Main.main171) -}
3ba01f92ed0c96b32c1139d69c3fd8f0
  main171 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 50#) -}
41ba8d217b6a5f04e7d28748594b83f4
  main172 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 27#) -}
b9152a55c6ab7e42f92e39c2309467ed
  main173 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main174
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
b0f5fc12096250ae6e106e2be363eac8
  main174 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (case Test.Hspec.Core.Tree.$wspecItem
                        @ Test.Hspec.Expectations.Expectation
                        Main.main179
                          `cast`
                        (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                        Test.Hspec.Core.Example.$fExampleIO1
                          `cast`
                        (Trans
                             (<Test.Hspec.Expectations.Expectation>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.Hspec.Expectations.Expectation>_N)))
                        Main.main178
                        Main.main175
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R)) of ww { Unit# ww1 ->
                 Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   ww1 }) -}
0b34a9ce0c5d8ddcfd722b3748ba8a05
  main175 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 Test.Hspec.Expectations.shouldBe1
                   @ (Data.Either.Either GHC.Base.String GHC.Types.Int)
                   Main.main152
                     `cast`
                   (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fShowEither
                   Main.$s$fEqEither
                   Main.main177
                   Main.main176
                   eta) -}
bf51c3860711cbf728d10c8384866789
  main176 :: Data.Either.Either GHC.Base.String GHC.Types.Int
  {- HasNoCafRefs,
     Unfolding: (Data.Either.Right
                   @ GHC.Base.String
                   @ GHC.Types.Int
                   Main.main78) -}
fc56759f9060ed1ee97dc036003e7e3c
  main177 :: Data.Either.Either GHC.Base.String GHC.Types.Int
  {- Unfolding: (DNA.$wcount 'A'# (GHC.Types.[] @ GHC.Types.Char)) -}
abb8a15091ad370f8a2eb113382129a8
  main178 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "empty dna strand has no adenosine"#) -}
791a1191d9a012b85e4a02def3a82611
  main179 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main180) -}
8700f2c1a5b8eaa2d839470f151d12b4
  main18 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main25
                   Main.main19
                   GHC.Stack.Types.EmptyCallStack) -}
efea7fe8e9fb6831dca100c24f98262f
  main180 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main34
                   Main.main181
                   GHC.Stack.Types.EmptyCallStack) -}
95f5a0e3fa792da313e5276a37ee4e74
  main181 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main183
                   Main.main32
                   Main.main183
                   Main.main182) -}
507738d4623708633d29f2bb6149cff9
  main182 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 51#) -}
69fdc2ff9ab2f85dc343f584ec2dc8bd
  main183 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 24#) -}
e22e0392f3d203f88de088e1945cc589
  main184 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main186
                   Main.main185) -}
85d8330e978f474a28d99178f3c1bb39
  main185 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ount"#) -}
9747481e81a67aa77b59d0bfcb76d810
  main186 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'c'#) -}
8c8af6a2e5425c33b3d21c429191cd69
  main187 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.main108
                   Main.main188) -}
c47150fbe0860a59ae8cc96d6a368d07
  main188 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "ucleotide-count"#) -}
d3ef93326c6b184ba52ecd9d578551b8
  main189 :: Test.Hspec.Options.Config
  {- Unfolding: (Test.Hspec.Options.Config
                   GHC.Types.False
                   GHC.Types.False
                   GHC.Types.True
                   GHC.Types.False
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ (Test.Hspec.Core.Util.Path -> GHC.Types.Bool))
                   (GHC.Base.Nothing @ GHC.Integer.Type.Integer)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   (GHC.Base.Nothing @ GHC.Types.Int)
                   Test.Hspec.Core.Example.defaultParams1
                   Test.Hspec.Options.ColorAuto
                   (GHC.Base.Nothing @ Test.Hspec.Core.Formatters.Internal.Formatter)
                   GHC.Types.False
                   Test.Hspec.Options.defaultConfig1
                   (GHC.Base.Nothing @ GHC.Types.Int)) -}
5f12e86ccc9307849d2b111a5fd9fabd
  main19 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main21
                   Main.main20
                   Main.main21
                   Main.main21) -}
9ba076fa7c1a0d6807fc34b96e4486cb
  main190 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
8cf8e8e4ed8d9228c9d3543139f6c275
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((),
           [Test.Hspec.Core.Tree.Tree
              (Test.Hspec.Core.Example.ActionWith ())
              (Test.Hspec.Core.Tree.Item ())]) #)
  {- Arity: 1,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 (# eta, Main.main3 #)) -}
5edf26d35a2f9397c7d5d390459aeeb6
  main20 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 15#) -}
c74837bed44b4901deee4dad39b40723
  main21 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 61#) -}
37394bcb754974de23890c5d65923365
  main22 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "test\\Tests.hs"#) -}
ce774242f1d455bbb9fb41d9cbc467fb
  main23 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Main"#) -}
d00ba3015e9a9e47054573e40f3796e4
  main24 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "main"#) -}
3d99b5447ebaa5743145408309239406
  main25 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "shouldSatisfy"#) -}
77f7ad1321e15689890de4a73c8a30a2
  main26 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GPAC"#) -}
b2ec859b1ac6d7b974fa9af291fec57f
  main27 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "validates strand"#) -}
c62981a9c3f81cdbd5387f37469b0b48
  main28 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main29) -}
5b19eb1f1275787dec666e1a52190a44
  main29 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main34
                   Main.main30
                   GHC.Stack.Types.EmptyCallStack) -}
a2897be7ac0dc10564f6273678de1494
  main3 ::
    ((),
     [Test.Hspec.Core.Tree.Tree
        (Test.Hspec.Core.Example.ActionWith ())
        (Test.Hspec.Core.Tree.Item ())])
  {- Unfolding: ((GHC.Tuple.(), Main.main4)) -}
756156a00a902a62e4780bbfd80d4ab7
  main30 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main33
                   Main.main32
                   Main.main33
                   Main.main31) -}
6630d51cfa9dc3fcb6765ee765b3f2eb
  main31 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 34#) -}
c32bc0a60a818433224a9a48a0b69ee7
  main32 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 13#) -}
b300b5a1b062431049aeb50cb9c4f12a
  main33 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 60#) -}
b0d90e048bdb0f29bf0cede5a3b3d843
  main34 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "it"#) -}
76000718492105a2be3aa0699b5e8c49
  main35 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main36
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
99472908f1e3ff45ab4a77028c1584e4
  main36 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (case Test.Hspec.Core.Tree.$wspecItem
                        @ Test.Hspec.Expectations.Expectation
                        Main.main63
                          `cast`
                        (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                        Test.Hspec.Core.Example.$fExampleIO1
                          `cast`
                        (Trans
                             (<Test.Hspec.Expectations.Expectation>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.Hspec.Expectations.Expectation>_N)))
                        Main.main62
                        Main.main37
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R)) of ww { Unit# ww1 ->
                 Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   ww1 }) -}
3299376592d56c7c18d17bfefdaed621
  main37 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 Test.Hspec.Expectations.shouldBe1
                   @ (Data.Either.Either
                        GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int))
                   Main.main58
                     `cast`
                   (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fShowEither4
                   Main.$s$fEqEither2
                   Main.main56
                   Main.main38
                   eta) -}
c05992356a924a07f31d8012ac6da59a
  main38 ::
    Data.Either.Either
      GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Unfolding: (Data.Either.Right
                   @ GHC.Base.String
                   @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                   Main.main39) -}
8d48ebaa111dc0504a9540fd41689513
  main39 :: Data.Map.Base.Map GHC.Types.Char GHC.Types.Int
  {- Unfolding: (Main.$sfromList @ GHC.Types.Int Main.main40) -}
00f5c8e45d702ff0523e4dbe7d92b4f5
  main4 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main5
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
6a1b8f153cb4ed61df3470b5f7db317d
  main40 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main53
                   Main.main41) -}
dcbd658e90adb207b5b1f3ffa851045e
  main41 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main50
                   Main.main42) -}
a5138dc90498dfa4e17d42927cfc5b46
  main42 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main47
                   Main.main43) -}
070721ba5aaf7bec7736769e47c876d9
  main43 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main44
                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))) -}
c276a24cd7a9f43b3abd9dc29e435e06
  main44 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main46, Main.main45)) -}
fe03c205cb2cfa3775afdb5c66c81fc7
  main45 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 21#) -}
e55dbbd0c85f92266931941350dc69e2
  main46 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'T'#) -}
911673d5c55a84d4706f2d0267e02492
  main47 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main49, Main.main48)) -}
b794e8253b0a9ae63a08bf5ae7ff9052
  main48 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 17#) -}
ad5005da5a0f8f1d21de5cf03b667939
  main49 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'G'#) -}
802efefa81a26987d59baa5952ed7c07
  main5 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main187
                   Main.main6) -}
51d7504b7ba75f2c90c5df09145b2428
  main50 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main52, Main.main51)) -}
6ea28b8bda92f7fca09098c58cd59e50
  main51 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 12#) -}
1073d8b720b0cbae36584c619406a02b
  main52 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'C'#) -}
58c4b6fa73e65679e20f45aa9057c405
  main53 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main55, Main.main54)) -}
975874b71b70c7026b2931cced605e29
  main54 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 20#) -}
5639035f0b58213a59824a93807cf242
  main55 :: GHC.Types.Char
  {- HasNoCafRefs, Unfolding: (GHC.Types.C# 'A'#) -}
bb028ebb3c93f1a5b3182e647f2aa415
  main56 ::
    Data.Either.Either
      GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Unfolding: (DNA.nucleotideCounts Main.main57) -}
083c278f44109f649732043c66372e08
  main57 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "AGCTTTTCATTCTGACTGCAACGGGCAATATGTCTCTGTGTGGATTAAAAAAAGAGTGTCTGATAGCAGC"#) -}
f30985ac9444fa188990ddd7d34d3edb
  main58 :: GHC.Stack.Types.CallStack
  {- Strictness: m2,
     Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main61
                   Main.main59
                   GHC.Stack.Types.EmptyCallStack) -}
0637934d4488cb10585e4eb4b522980f
  main59 :: GHC.Stack.Types.SrcLoc
  {- Strictness: m,
     Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main54
                   Main.main31
                   Main.main54
                   Main.main60) -}
ebff46752bd74ae93409752cda102a0c
  main6 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main109
                   Main.main7) -}
60a67bc980ecfabfcff0328165399774
  main60 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 67#) -}
8d6f804f2e09d97c60e1d27f547e68ac
  main61 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "shouldBe"#) -}
5affe04c79c2569fb2edb88d0eafda14
  main62 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "counts all nucleotides"#) -}
13a3188d03a54f754eb259eed1b70b4a
  main63 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main64) -}
3e78d6850d7021cb3998d31fe0629459
  main64 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main34
                   Main.main65
                   GHC.Stack.Types.EmptyCallStack) -}
ef3382c1bcd55176da30e950f5b04694
  main65 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main67
                   Main.main32
                   Main.main67
                   Main.main66) -}
12f5401341a09e0b1df685395c3e97cc
  main66 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 40#) -}
51020a593addc11a4ddb2644cdafb9d2
  main67 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 53#) -}
1ee315584c8b0b1ae1081d12eb989454
  main68 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main69
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
69d485497712ab65d6f6510b27bedebf
  main69 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (case Test.Hspec.Core.Tree.$wspecItem
                        @ Test.Hspec.Expectations.Expectation
                        Main.main86
                          `cast`
                        (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                        Test.Hspec.Core.Example.$fExampleIO1
                          `cast`
                        (Trans
                             (<Test.Hspec.Expectations.Expectation>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.Hspec.Expectations.Expectation>_N)))
                        Main.main85
                        Main.main70
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R)) of ww { Unit# ww1 ->
                 Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   ww1 }) -}
9bf27eeb61555ef3540a5f699e48da38
  main7 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main8
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.Tree
                           (Test.Hspec.Core.Example.ActionWith ())
                           (Test.Hspec.Core.Tree.Item ())))) -}
457d7e250afeb8288f1ffdcd16c794fa
  main70 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 Test.Hspec.Expectations.shouldBe1
                   @ (Data.Either.Either
                        GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int))
                   Main.main58
                     `cast`
                   (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fShowEither4
                   Main.$s$fEqEither2
                   Main.main83
                   Main.main71
                   eta) -}
c655182c579cfb29061d9cbbc983d8c8
  main71 ::
    Data.Either.Either
      GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Unfolding: (Data.Either.Right
                   @ GHC.Base.String
                   @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                   Main.main72) -}
d91530506b094e2b21a24d8416aaae39
  main72 :: Data.Map.Base.Map GHC.Types.Char GHC.Types.Int
  {- Unfolding: (Main.$sfromList @ GHC.Types.Int Main.main73) -}
e94aad4974efb9d850c2532ce5552a68
  main73 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main82
                   Main.main74) -}
cb4cc7159e5440f277180a1d3fc3bdf9
  main74 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main81
                   Main.main75) -}
89e2095138e0aaca06b62cee367e94ed
  main75 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main79
                   Main.main76) -}
079fff1596e6d2415a1a8ce345af0f96
  main76 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main77
                   (GHC.Types.[] @ (GHC.Types.Char, GHC.Types.Int))) -}
316e455c27f6c096d26a338a0dc8f656
  main77 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main46, Main.main78)) -}
18689f3dcd3efb421d048dd303ef83fd
  main78 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 0#) -}
3a2dc3e7638e3a3c5081db71a1b74567
  main79 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main49, Main.main80)) -}
8c2383dea24fda4c866d6f3c371ace24
  main8 ::
    Test.Hspec.Core.Tree.Tree
      (Test.Hspec.Core.Example.ActionWith ())
      (Test.Hspec.Core.Tree.Item ())
  {- Unfolding: (Test.Hspec.Core.Tree.Node
                   @ (Test.Hspec.Core.Example.ActionWith ())
                   @ (Test.Hspec.Core.Tree.Item ())
                   Main.main106
                   Main.main9) -}
548c02425fe083b841f02b413e5272df
  main80 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 8#) -}
c3e9c5b2af03130580d6d867f861c7f6
  main81 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main52, Main.main78)) -}
b134e7ab9ddc481b235832480e8081de
  main82 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main55, Main.main78)) -}
162f66a1c13dfe17ffdf9c729995a728
  main83 ::
    Data.Either.Either
      GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Unfolding: (DNA.nucleotideCounts Main.main84) -}
4dca0d4919bc700e8af4fad6aa3f4ff5
  main84 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "GGGGGGGG"#) -}
d133678b74ca058d8d36ade4325bcb5e
  main85 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   "repetitive-sequence-has-only-guanosine"#) -}
e0644289a37b4f58e05ff15da57e17e1
  main86 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Test.Hspec.Core.Spec.it9
                   Test.Hspec.Core.Spec.it2
                   Main.main87) -}
2dddc1f5fae82ba9a69b575d458db76c
  main87 :: GHC.Stack.Types.CallStack
  {- Unfolding: (GHC.Stack.Types.PushCallStack
                   Main.main34
                   Main.main88
                   GHC.Stack.Types.EmptyCallStack) -}
86c650545c89826b16ddbec9cda7616f
  main88 :: GHC.Stack.Types.SrcLoc
  {- Unfolding: (GHC.Stack.Types.SrcLoc
                   Main.main24
                   Main.main23
                   Main.main22
                   Main.main90
                   Main.main32
                   Main.main90
                   Main.main89) -}
ed0946e845c924215830ebd824d0ac02
  main89 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 56#) -}
1383cd51bf1f383b87239e7264045edf
  main9 ::
    [Test.Hspec.Core.Tree.Tree
       (Test.Hspec.Core.Example.ActionWith ())
       (Test.Hspec.Core.Tree.Item ())]
  {- Unfolding: (GHC.Base.++
                   @ (Test.Hspec.Core.Tree.Tree
                        (Test.Hspec.Core.Example.ActionWith ())
                        (Test.Hspec.Core.Tree.Item ()))
                   Main.main91
                     `cast`
                   ([(Test.Hspec.Core.Tree.Tree
                        (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])
                         ->_R <GHC.Types.IO ()>_R)
                        (Test.Hspec.Core.Tree.Item
                           (Sub (Test.Hspec.Core.Example.D:R:ArgIO[0])))_R)_R])_R
                   Main.main10) -}
7e69357d94ddb14756b2b31d3b420981
  main90 :: GHC.Types.Int
  {- HasNoCafRefs, Unfolding: (GHC.Types.I# 47#) -}
a493fb6f476261e6da5ad4750dfdc77a
  main91 ::
    [Test.Hspec.Core.Tree.SpecTree
       (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)]
  {- Unfolding: (GHC.Types.:
                   @ (Test.Hspec.Core.Tree.SpecTree
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   Main.main92
                   (GHC.Types.[]
                      @ (Test.Hspec.Core.Tree.SpecTree
                           (Test.Hspec.Core.Example.Arg
                              Test.Hspec.Expectations.Expectation)))) -}
b5d0e7a7ac6ef27ad42c466d62fc03da
  main92 ::
    Test.Hspec.Core.Tree.SpecTree
      (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation)
  {- Unfolding: (case Test.Hspec.Core.Tree.$wspecItem
                        @ Test.Hspec.Expectations.Expectation
                        Main.main102
                          `cast`
                        (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                        Test.Hspec.Core.Example.$fExampleIO1
                          `cast`
                        (Trans
                             (<Test.Hspec.Expectations.Expectation>_R
                              ->_R <Test.Hspec.Core.Example.Params>_R
                              ->_R ((Trans
                                         (Sub (Test.Hspec.Core.Example.D:R:Arg(->)0[0] <()>_N))
                                         (Sub (Sym (Test.Hspec.Core.Example.D:R:ArgIO[0])))
                                     ->_R <GHC.Types.IO ()>_R)
                                    ->_R <GHC.Types.IO ()>_R)
                              ->_R <Test.Hspec.Core.Example.ProgressCallback>_R
                              ->_R Sym (GHC.Types.N:IO[0] <Test.Hspec.Core.Example.Result>_R))
                             (Sym (Test.Hspec.Core.Example.N:Example[0]
                                       <Test.Hspec.Expectations.Expectation>_N)))
                        Main.main101
                        Main.main93
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R)) of ww { Unit# ww1 ->
                 Test.Hspec.Core.Tree.Leaf
                   @ (Test.Hspec.Core.Example.ActionWith
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   @ (Test.Hspec.Core.Tree.Item
                        (Test.Hspec.Core.Example.Arg Test.Hspec.Expectations.Expectation))
                   ww1 }) -}
4f7856292f6301d869dc139140108cc1
  main93 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (\ (eta :: GHC.Prim.State#
                             GHC.Prim.RealWorld)[OneShot] ->
                 Test.Hspec.Expectations.shouldBe1
                   @ (Data.Either.Either
                        GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int))
                   Main.main58
                     `cast`
                   (Sym (GHC.Classes.N:IP[0] <"loc">_N <GHC.Stack.Types.CallStack>_N))
                   Main.$s$fShowEither4
                   Main.$s$fEqEither2
                   Main.main100
                   Main.main94
                   eta) -}
a188322a652b094fb6a5633aa9bea79c
  main94 ::
    Data.Either.Either
      GHC.Base.String (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
  {- Unfolding: (Data.Either.Right
                   @ GHC.Base.String
                   @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                   Main.main95) -}
6881390a01109274853689b847566b17
  main95 :: Data.Map.Base.Map GHC.Types.Char GHC.Types.Int
  {- Unfolding: (Main.$sfromList @ GHC.Types.Int Main.main96) -}
97fdf3292f90b4f3e78d5553b4a81f37
  main96 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main82
                   Main.main97) -}
0eb28260f7f3292b3c9b3225cc87d9ac
  main97 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main81
                   Main.main98) -}
a878dd97b69b128dab8236e358fd6ec0
  main98 :: [(GHC.Types.Char, GHC.Types.Int)]
  {- HasNoCafRefs,
     Unfolding: (GHC.Types.:
                   @ (GHC.Types.Char, GHC.Types.Int)
                   Main.main99
                   Main.main76) -}
8b082002ce087a1550043ed7a020bb2f
  main99 :: (GHC.Types.Char, GHC.Types.Int)
  {- HasNoCafRefs, Unfolding: ((Main.main49, Main.main78)) -}
"SPEC/Main $fEqEither @ String @ (Map Char Int)" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                            GHC.Base.String)
                                                                 ($dEq1 :: GHC.Classes.Eq
                                                                             (Data.Map.Base.Map
                                                                                GHC.Types.Char
                                                                                GHC.Types.Int))
  Data.Either.$fEqEither @ [GHC.Types.Char]
                         @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                         $dEq
                         $dEq1
  = Main.$s$fEqEither2
"SPEC/Main $fEqEither @ String @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                 GHC.Base.String)
                                                      ($dEq1 :: GHC.Classes.Eq GHC.Types.Int)
  Data.Either.$fEqEither @ [GHC.Types.Char]
                         @ GHC.Types.Int
                         $dEq
                         $dEq1
  = Main.$s$fEqEither
"SPEC/Main $fEqMap @ Char @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                            GHC.Types.Char)
                                                 ($dEq1 :: GHC.Classes.Eq GHC.Types.Int)
  Data.Map.Base.$fEqMap @ GHC.Types.Char @ GHC.Types.Int $dEq $dEq1
  = Main.$s$fEqEither_$s$fEqMap
"SPEC/Main $fEqMap_$c/= @ Char @ Int" [ALWAYS] forall ($dEq :: GHC.Classes.Eq
                                                                 GHC.Types.Char)
                                                      ($dEq1 :: GHC.Classes.Eq GHC.Types.Int)
  Data.Map.Base.$fEqMap_$c/= @ GHC.Types.Char
                             @ GHC.Types.Int
                             $dEq
                             $dEq1
  = Main.$s$fEqEither_$s$fEqMap_$c/=
"SPEC/Main $fShowEither @ String @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                     GHC.Base.String)
                                                        ($dShow1 :: GHC.Show.Show GHC.Types.Int)
  Data.Either.$fShowEither @ [GHC.Types.Char]
                           @ GHC.Types.Int
                           $dShow
                           $dShow1
  = Main.$s$fShowEither
"SPEC/Main $fShowEither @ [Char] @ (Map Char Int)" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                                [GHC.Types.Char])
                                                                   ($dShow1 :: GHC.Show.Show
                                                                                 (Data.Map.Base.Map
                                                                                    GHC.Types.Char
                                                                                    GHC.Types.Int))
  Data.Either.$fShowEither @ [GHC.Types.Char]
                           @ (Data.Map.Base.Map GHC.Types.Char GHC.Types.Int)
                           $dShow
                           $dShow1
  = Main.$s$fShowEither4
"SPEC/Main $fShowMap @ Char @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                GHC.Types.Char)
                                                   ($dShow1 :: GHC.Show.Show GHC.Types.Int)
  Data.Map.Base.$fShowMap @ GHC.Types.Char
                          @ GHC.Types.Int
                          $dShow
                          $dShow1
  = Main.$s$fShowEither_$s$fShowMap
"SPEC/Main $fShowMap_$cshowList @ Char @ Int" [ALWAYS] forall ($dShow :: GHC.Show.Show
                                                                           GHC.Types.Char)
                                                              ($dShow1 :: GHC.Show.Show
                                                                            GHC.Types.Int)
  Data.Map.Base.$fShowMap_$cshowList @ GHC.Types.Char
                                     @ GHC.Types.Int
                                     $dShow
                                     $dShow1
  = Main.$s$fShowEither_$s$fShowMap_$cshowList
"SPEC/Main fromList @ Char _" [ALWAYS] forall @ a
                                              ($dOrd :: GHC.Classes.Ord GHC.Types.Char)
  Data.Map.Base.fromList @ GHC.Types.Char @ a $dOrd
  = Main.$sfromList @ a
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

