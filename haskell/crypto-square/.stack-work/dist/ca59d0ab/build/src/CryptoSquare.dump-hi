
==================== FINAL INTERFACE ====================
2017-05-19 13:15:18.6071316 UTC

interface crypto-square-0.1.0.2-6nXmMgi6PaKANT1A33Il4u:CryptoSquare 8002
  interface hash: d7c69bedb854ff5c6cd4f78532eca9f3
  ABI hash: f63f67f1540b47576deab799f1b404ae
  export-list hash: 7cc8fb4f35cd87f3266c43aeecf3c84e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 50be09f6ae5701bb586bc6db9bc9ce26
  sig of: Nothing
  used TH splices: False
  where
exports:
  CryptoSquare.encode
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Char c49b58282af11503cc838e1052cf6b83
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:GHC.Unicode 7b64ed854a326c2c5bb224f237ed4a0b
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 84db683b1ee25db1d6015fdde5c02e7c
0f0afb20e4c16491f0430398b5e86619
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CryptoSquare.$trModule2
                   CryptoSquare.$trModule1) -}
20662e5bfabc03c2e86b0d8e9a55c326
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CryptoSquare"#) -}
c50cb92f3654674e5d69d84cfc5617da
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "crypto-square-0.1.0.2-6nXmMgi6PaKANT1A33Il4u"#) -}
45a6d26133b51012912f88617f245f5e
  encode :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: GHC.Base.String) ->
                 let {
                   filteredEncoded :: [GHC.Types.Char] = CryptoSquare.encode_go1 xs
                 } in
                 CryptoSquare.encode_go
                   (Data.OldList.transpose
                      @ GHC.Types.Char
                      (Data.List.Split.Internals.chunksOf
                         @ GHC.Types.Char
                         (case GHC.List.$wlenAcc
                                 @ GHC.Types.Char
                                 filteredEncoded
                                 0# of ww2 { DEFAULT ->
                          case GHC.Classes.divInt# ww2 2# of ww4 { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.># 1# ww4) of wild {
                            GHC.Types.False
                            -> letrec {
                                 go :: GHC.Prim.Int# -> GHC.Types.Int -> GHC.Types.Int
                                   {- Arity: 2, Strictness: <S,U><L,1*U(U)> -}
                                 = \ (x :: GHC.Prim.Int#) (eta :: GHC.Types.Int) ->
                                   case GHC.Prim.tagToEnum#
                                          @ GHC.Types.Bool
                                          (GHC.Prim.<=# (GHC.Prim.*# x x) ww2) of wild1 {
                                     GHC.Types.False
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.<=#
                                                  (GHC.Prim.*# x (GHC.Prim.-# x 1#))
                                                  ww2) of wild2 {
                                          GHC.Types.False
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.==# x ww4) of wild3 {
                                               GHC.Types.False -> go (GHC.Prim.+# x 1#) eta
                                               GHC.Types.True -> eta }
                                          GHC.Types.True
                                          -> case GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.==# x ww4) of wild3 {
                                               GHC.Types.False
                                               -> go (GHC.Prim.+# x 1#) (GHC.Types.I# x)
                                               GHC.Types.True -> GHC.Types.I# x } }
                                     GHC.Types.True
                                     -> case GHC.Prim.tagToEnum#
                                               @ GHC.Types.Bool
                                               (GHC.Prim.==# x ww4) of wild2 {
                                          GHC.Types.False -> go (GHC.Prim.+# x 1#) (GHC.Types.I# x)
                                          GHC.Types.True -> GHC.Types.I# x } }
                               } in
                               case go
                                      1#
                                      (GHC.List.lastError
                                         @ GHC.Types.Int) of wild1 { GHC.Types.I# x ->
                               case GHC.Prim.tagToEnum#
                                      @ GHC.Types.Bool
                                      (GHC.Prim.<# (GHC.Prim.*# x x) ww2) of wild2 {
                                 GHC.Types.False -> wild1
                                 GHC.Types.True
                                 -> let {
                                      x1 :: GHC.Prim.Int# = GHC.Prim.+# x 1#
                                    } in
                                    case GHC.Prim.tagToEnum#
                                           @ GHC.Types.Bool
                                           (GHC.Prim.># (GHC.Prim.*# x1 x1) ww2) of wild3 {
                                      GHC.Types.False -> wild1
                                      GHC.Types.True -> GHC.Types.I# x1 } } }
                            GHC.Types.True
                            -> case GHC.List.lastError ret_ty GHC.Types.Int of {} } } })
                         filteredEncoded))) -}
af2845c60eb66154ba22dde9fd84aae8
  encode_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
50a5344fd0354f6bff75d95881860537
  encode_go1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

