
==================== FINAL INTERFACE ====================
2017-02-12 21:27:06.1290364 UTC

interface secret-handshake-0.0.0-CjPa9aMM3781OzZTTB55PX:SecretHandshake 8001
  interface hash: dc79ab5ccd8d4d4dcb42ae2a4b6b0ceb
  ABI hash: 6ced1d7ef422b3a371e96fa19495f58c
  export-list hash: d4e365c9f1af5ae8fdd5abbc556506ac
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 87fad1695b0eb47c1139baaab68b42ca
  sig of: Nothing
  used TH splices: False
  where
exports:
  SecretHandshake.Secret|{SecretHandshake.handshake}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Bits c954f6297e2203ba924b7d4bb91aa2cf
import  -/  base-4.9.0.0:Data.Char 793b969914b1622fef8ab278ed0a2b7f
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Real 011de9ca3282ad24a84e4e15f974f98e
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  base-4.9.0.0:Text.Read 575a1becf4a56881b7def2de5a4c3776
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
5cfe152c39c5988280a7a9a0b88dbcc3
  $fSecretInt :: SecretHandshake.Secret GHC.Types.Int
  DFunId
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SecretHandshake.$fSecretInt_$chandshake
                  `cast`
                (Sym (SecretHandshake.N:Secret[0] <GHC.Types.Int>_N)) -}
e3e1bdff43d43ea03d10ad476767d24a
  $fSecretInt1 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   SecretHandshake.$fSecretInt8
                   SecretHandshake.$fSecretInt2) -}
cd5c4ce426592e182956e4a12efd2d04
  $fSecretInt10 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "close your eyes"#) -}
6ec803774a90fd5bbda8ea0ac4545480
  $fSecretInt11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "double blink"#) -}
39cdc0142174e4e15fb2a7bd2c338764
  $fSecretInt12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "wink"#) -}
2d3696c12ffc1a9740e71b7ff2be5085
  $fSecretInt13 :: GHC.Base.String
  {- Strictness: x -}
563f9fa3d3dd70b54c7e5a298b6ab7b5
  $fSecretInt2 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   SecretHandshake.$fSecretInt7
                   SecretHandshake.$fSecretInt3) -}
f2500acf80eab9bb038db6dff8589212
  $fSecretInt3 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   SecretHandshake.$fSecretInt6
                   SecretHandshake.$fSecretInt4) -}
233ee8fc126ed8bd3656b5a14a3d338f
  $fSecretInt4 :: [GHC.Types.Int]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Int
                   SecretHandshake.$fSecretInt5
                   (GHC.Types.[] @ GHC.Types.Int)) -}
75fc1a7eb777b56aed11e80670d27b92
  $fSecretInt5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
acdd7e6668f62117418cb48f7c838309
  $fSecretInt6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
0e12ea595d60251d698258a7ab56020a
  $fSecretInt7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
51174e797d984618f1d01b4ee05e20a8
  $fSecretInt8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1#) -}
cf979998de07292eab595aba8d281386
  $fSecretInt9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "jump"#) -}
9766e9cd90f05c8dee4e592665f064a4
  $fSecretInt_$chandshake :: GHC.Types.Int -> [GHC.Base.String]
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 SecretHandshake.$w$chandshake ww1 }) -}
5cfe152c39c5988280a7a9a0b88dbcc3
  $fSecret[] :: SecretHandshake.Secret GHC.Base.String
  DFunId
  {- Arity: 1, Strictness: <L,U>, Inline: INLINE (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                SecretHandshake.$fSecret[]_$chandshake
                  `cast`
                (Sym (SecretHandshake.N:Secret[0] <GHC.Base.String>_N)) -}
67b0d9a225c4a42c42f56796de62e559
  $fSecret[]1 :: Text.ParserCombinators.ReadP.P GHC.Types.Int
  {- Unfolding: ((GHC.Read.$fReadInt3
                    GHC.Read.$fReadInt_$sconvertInt
                    Text.ParserCombinators.ReadPrec.minPrec)
                   `cast`
                 (Text.ParserCombinators.ReadP.N:ReadP[0] <GHC.Types.Int>_R)
                   @ GHC.Types.Int
                   (Text.Read.readEither5 @ GHC.Types.Int)) -}
5e05e77248f7156ab51467fe3e9f89fc
  $fSecret[]_$chandshake :: GHC.Base.String -> [GHC.Base.String]
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: (\ (x :: GHC.Base.String) ->
                 case Text.Read.readEither6
                        @ GHC.Types.Int
                        (Text.ParserCombinators.ReadP.run
                           @ GHC.Types.Int
                           SecretHandshake.$fSecret[]1
                           x) of wild {
                   [] -> GHC.Types.[] @ GHC.Base.String
                   : x1 ds
                   -> case ds of wild1 {
                        []
                        -> case SecretHandshake.$wgo
                                  (GHC.List.reverse1
                                     @ GHC.Types.Char
                                     x
                                     (GHC.Types.[] @ GHC.Types.Char))
                                  (case GHC.List.$wlenAcc @ GHC.Types.Char x 0# of ww2 { DEFAULT ->
                                   GHC.Enum.eftInt 0# ww2 })
                                  0# of ww { DEFAULT ->
                           SecretHandshake.$w$chandshake ww }
                        : ipv ipv1 -> GHC.Types.[] @ GHC.Base.String } }) -}
c72bd10c6b5e074adf46720a974f52db
  $tc'C:Secret :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15382112336068188198##
                   4407848462982316243##
                   SecretHandshake.$trModule
                   SecretHandshake.$tc'C:Secret1) -}
0ec5de5ad3e08616e05e1933aa918dab
  $tc'C:Secret1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'C:Secret"#) -}
07218fbe59e665d09b2e9194fe367031
  $tcSecret :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16120070275372921055##
                   2358323386449499004##
                   SecretHandshake.$trModule
                   SecretHandshake.$tcSecret1) -}
8e3aed8c92880f04a234f8ddc3921516
  $tcSecret1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Secret"#) -}
3c0e63bc977386490c34815f6f7dc66d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   SecretHandshake.$trModule2
                   SecretHandshake.$trModule1) -}
3c8b32e969bc2b0da0279c8541101102
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "SecretHandshake"#) -}
f34ec1453411aa2fb932fa987b6215cd
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "secret-handshake-0.0.0-CjPa9aMM3781OzZTTB55PX"#) -}
cc89aa6a51a2b0d821f453cd2f0fe8bc
  $w$chandshake :: GHC.Prim.Int# -> [[GHC.Types.Char]]
  {- Arity: 1, Strictness: <S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 letrec {
                   xs :: [GHC.Types.Int] -> [[GHC.Types.Char]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Types.Int]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ [GHC.Types.Char]
                       : y ys
                       -> case y of wild1 { GHC.Types.I# ds1 ->
                          case ds1 of ds2 {
                            DEFAULT
                            -> case SecretHandshake.$fSecretInt13
                               ret_ty [[GHC.Types.Char]]
                               of {}
                            1#
                            -> case GHC.Prim.andI# ww 1# of wild2 {
                                 DEFAULT
                                 -> case SecretHandshake.$fSecretInt12 of wild3 {
                                      [] -> xs ys
                                      : ds3 ds4 -> GHC.Types.: @ [GHC.Types.Char] wild3 (xs ys) }
                                 0# -> xs ys }
                            2#
                            -> case GHC.Prim.andI# ww 2# of wild2 {
                                 DEFAULT
                                 -> case SecretHandshake.$fSecretInt11 of wild3 {
                                      [] -> xs ys
                                      : ds3 ds4 -> GHC.Types.: @ [GHC.Types.Char] wild3 (xs ys) }
                                 0# -> xs ys }
                            4#
                            -> case GHC.Prim.andI# ww 4# of wild2 {
                                 DEFAULT
                                 -> case SecretHandshake.$fSecretInt10 of wild3 {
                                      [] -> xs ys
                                      : ds3 ds4 -> GHC.Types.: @ [GHC.Types.Char] wild3 (xs ys) }
                                 0# -> xs ys }
                            8#
                            -> case GHC.Prim.andI# ww 8# of wild2 {
                                 DEFAULT
                                 -> case SecretHandshake.$fSecretInt9 of wild3 {
                                      [] -> xs ys
                                      : ds3 ds4 -> GHC.Types.: @ [GHC.Types.Char] wild3 (xs ys) }
                                 0# -> xs ys } } } }
                 } in
                 case GHC.Prim.andI# ww 16# of wild {
                   DEFAULT
                   -> GHC.List.reverse1
                        @ [GHC.Types.Char]
                        (xs SecretHandshake.$fSecretInt1)
                        (GHC.Types.[] @ [GHC.Types.Char])
                   0# -> xs SecretHandshake.$fSecretInt1 }) -}
0092bf74b0032bc6e9dfe2c1817a5c47
  $wgo ::
    [GHC.Types.Char]
    -> [GHC.Types.Int] -> GHC.Prim.Int# -> GHC.Prim.Int#
  {- Arity: 3, Strictness: <S,1*U><L,1*U><L,U>, Inline: [0] -}
5cfe152c39c5988280a7a9a0b88dbcc3
  class Secret a where
    handshake :: a -> [GHC.Base.String]
    {-# MINIMAL handshake #-}
instance [safe] SecretHandshake.Secret [GHC.Types.Int]
  = SecretHandshake.$fSecretInt
instance [safe] SecretHandshake.Secret [[]]
  = SecretHandshake.$fSecret[]
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

