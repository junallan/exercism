
==================== FINAL INTERFACE ====================
2017-06-05 14:03:27.6525556 UTC

interface binary-search-tree-0.1.0.2-5qhmX5hcjjM8R5Xizxqo5m:BST 8002
  interface hash: c34b5499103c8645d2ef55d6ceb30761
  ABI hash: 55eb4fc9d33257a41dc244b7eec94974
  export-list hash: 6376640ed9625bb073bc906d141f2944
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 50be09f6ae5701bb586bc6db9bc9ce26
  sig of: Nothing
  used TH splices: False
  where
exports:
  BST.bstLeft
  BST.bstRight
  BST.bstValue
  BST.empty
  BST.fromList
  BST.insert
  BST.singleton
  BST.toList
  BST.BST
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.Maybe ecf0c6f81372d9b58b142d5e758ea51b
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
147e6865ea7541f3b7f2d18e04429349
  $fEqBST :: GHC.Classes.Eq a => GHC.Classes.Eq (BST.BST a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (BST.BST a)
                  (BST.$fEqBST_$c== @ a $dEq)
                  (BST.$fEqBST_$c/= @ a $dEq) -}
147e6865ea7541f3b7f2d18e04429349
  $fEqBST_$c/= ::
    GHC.Classes.Eq a => BST.BST a -> BST.BST a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: BST.BST a)
                   (b :: BST.BST a) ->
                 case BST.$fEqBST_$c== @ a $dEq a1 b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
147e6865ea7541f3b7f2d18e04429349
  $fEqBST_$c== ::
    GHC.Classes.Eq a => BST.BST a -> BST.BST a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U> -}
147e6865ea7541f3b7f2d18e04429349
  $fShowBST :: GHC.Show.Show a => GHC.Show.Show (BST.BST a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (BST.BST a)
                  (BST.$fShowBST_$cshowsPrec @ a $dShow)
                  (BST.$fShowBST_$cshow @ a $dShow)
                  (BST.$fShowBST_$cshowList @ a $dShow) -}
a4cf1728f12c5b46f9bac78adb1dd134
  $fShowBST1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
147e6865ea7541f3b7f2d18e04429349
  $fShowBST_$cshow :: GHC.Show.Show a => BST.BST a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: BST.BST a) ->
                 BST.$fShowBST_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
147e6865ea7541f3b7f2d18e04429349
  $fShowBST_$cshowList ::
    GHC.Show.Show a => [BST.BST a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [BST.BST a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (BST.BST a)
                   (BST.$fShowBST_$cshowsPrec @ a $dShow BST.$fShowBST1)
                   eta
                   eta1) -}
147e6865ea7541f3b7f2d18e04429349
  $fShowBST_$cshowsPrec ::
    GHC.Show.Show a => GHC.Types.Int -> BST.BST a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
e00b868a57926df038040e1294632eb3
  $tc'EmptyTree :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8104385730191706375##
                   17807009043534443821##
                   BST.$trModule
                   BST.$tc'EmptyTree1) -}
b8aafb44686109698e06ead19f5cddbd
  $tc'EmptyTree1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'EmptyTree"#) -}
f083de1e1487d1339f726b3682000450
  $tc'Node :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14197973676746752510##
                   14822377223938938992##
                   BST.$trModule
                   BST.$tc'Node1) -}
fcbf09dd139d5903b34517b4b1820216
  $tc'Node1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Node"#) -}
6006cacd45148ec44bcfca116cd2659b
  $tcBST :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6837784507266065163##
                   6084937035203500691##
                   BST.$trModule
                   BST.$trModule1) -}
8ee380d7dc8de4978262b2584321c692
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module BST.$trModule2 BST.$trModule1) -}
be81d474de26461d2422b5a99428866a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "BST"#) -}
aaab1ff306caa86aee014152f001a973
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "binary-search-tree-0.1.0.2-5qhmX5hcjjM8R5Xizxqo5m"#) -}
de91602a3fc66a12546fce583acca52a
  $winsert ::
    GHC.Classes.Ord a =>
    a -> BST.BST a -> (# a, BST.BST a, BST.BST a #)
  {- Arity: 3,
     Strictness: <L,U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><L,U><S,1*U>,
     Inline: [0] -}
147e6865ea7541f3b7f2d18e04429349
  data BST a = EmptyTree | Node a (BST.BST a) (BST.BST a)
79740c508a149562c89b7f1930ccdac0
  bstLeft :: BST.BST a -> GHC.Base.Maybe (BST.BST a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: BST.BST a) ->
                 case ds of wild {
                   BST.EmptyTree -> GHC.Base.Nothing @ (BST.BST a)
                   BST.Node a1 left ds1
                   -> case left of wild1 {
                        BST.EmptyTree -> GHC.Base.Nothing @ (BST.BST a)
                        BST.Node a2 ds2 ds3 -> GHC.Base.Just @ (BST.BST a) wild1 } }) -}
b22de5f1b8b9e1e20a489897532961dd
  bstRight :: BST.BST a -> GHC.Base.Maybe (BST.BST a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: BST.BST a) ->
                 case ds of wild {
                   BST.EmptyTree -> GHC.Base.Nothing @ (BST.BST a)
                   BST.Node a1 ds1 right
                   -> case right of wild1 {
                        BST.EmptyTree -> GHC.Base.Nothing @ (BST.BST a)
                        BST.Node a2 ds2 ds3 -> GHC.Base.Just @ (BST.BST a) wild1 } }) -}
ac2e87aece91ad6e4a21631557994f28
  bstValue :: BST.BST a -> GHC.Base.Maybe a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: BST.BST a) ->
                 case ds of wild {
                   BST.EmptyTree -> GHC.Base.Nothing @ a
                   BST.Node a1 ds1 ds2 -> GHC.Base.Just @ a a1 }) -}
0c500d3088df8db9d1ac321c521b9057
  empty :: BST.BST a
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) BST.EmptyTree -}
e81e933dd541cf94f52081e2b7e4242a
  fromList :: GHC.Classes.Ord a => [a] -> BST.BST a
  {- Arity: 2,
     Strictness: <L,U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><S,1*U> -}
c3f4152daecef828b5b9d154103b339a
  insert :: GHC.Classes.Ord a => a -> BST.BST a -> BST.BST a
  {- Arity: 3,
     Strictness: <L,U(A,A,A,C(C1(U)),C(C1(U)),A,A,A)><L,U><S,1*U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a (w :: GHC.Classes.Ord a) (w1 :: a) (w2 :: BST.BST a) ->
                 case BST.$winsert @ a w w1 w2 of ww { (#,,#) ww1 ww2 ww3 ->
                 BST.Node @ a ww1 ww2 ww3 }) -}
f9e86ff0b6e8c4a6b79f39c1ed9b2f7a
  singleton :: a -> BST.BST a
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x :: a) ->
                 BST.Node @ a x (BST.EmptyTree @ a) (BST.EmptyTree @ a)) -}
80cc161aa700a4d080b245c1727421fc
  toList :: BST.BST a -> [a]
  {- Arity: 1, Strictness: <S,1*U> -}
instance [safe] GHC.Classes.Eq [BST.BST] = BST.$fEqBST
instance [safe] GHC.Show.Show [BST.BST] = BST.$fShowBST
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

