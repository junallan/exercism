
==================== FINAL INTERFACE ====================
2017-07-02 21:07:04.0318526 UTC

interface custom-set-1.0.1.3-6xIZlkiF9PE72Wq5noTf24:CustomSet 8002
  interface hash: 1a3945056688ae94cb12d9caf7fd5554
  ABI hash: 8e0646c07dc485364a64e8768c5030c7
  export-list hash: c0c40a1e505ee6a5b3700a2a9c9a2628
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 50be09f6ae5701bb586bc6db9bc9ce26
  sig of: Nothing
  used TH splices: False
  where
exports:
  CustomSet.delete
  CustomSet.difference
  CustomSet.empty
  CustomSet.fromList
  CustomSet.insert
  CustomSet.intersection
  CustomSet.isDisjointFrom
  CustomSet.isSubsetOf
  CustomSet.member
  CustomSet.null
  CustomSet.size
  CustomSet.toList
  CustomSet.union
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Show eca5834daba3b6a2bbbe64ab52056707
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
cd9cac5c26687633bf56f8f0751268e9
  $fEqCustomSet ::
    GHC.Classes.Eq a => GHC.Classes.Eq (CustomSet.CustomSet a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dEq :: GHC.Classes.Eq a).
                  @ (CustomSet.CustomSet a)
                  (CustomSet.$fEqCustomSet_$c== @ a $dEq)
                  (CustomSet.$fEqCustomSet_$c/= @ a $dEq) -}
cd9cac5c26687633bf56f8f0751268e9
  $fEqCustomSet_$c/= ::
    GHC.Classes.Eq a =>
    CustomSet.CustomSet a -> CustomSet.CustomSet a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><L,U>,
     Inline: INLINE (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: CustomSet.CustomSet a)
                   (y :: CustomSet.CustomSet a) ->
                 GHC.Classes.not (CustomSet.$fEqCustomSet_$c== @ a $dEq x y)) -}
cd9cac5c26687633bf56f8f0751268e9
  $fEqCustomSet_$c== ::
    GHC.Classes.Eq a =>
    CustomSet.CustomSet a -> CustomSet.CustomSet a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U><S,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (left :: CustomSet.CustomSet a)
                   (right :: CustomSet.CustomSet a) ->
                 case GHC.List.$wlenAcc
                        @ a
                        (CustomSet.toList @ a $dEq left)
                        0# of ww2 { DEFAULT ->
                 case GHC.List.$wlenAcc
                        @ a
                        (CustomSet.toList @ a $dEq right)
                        0# of ww1 { DEFAULT ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.==# ww2 ww1) of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> CustomSet.isSubsetOf @ a $dEq left right } } }) -}
cd9cac5c26687633bf56f8f0751268e9
  $fShowCustomSet ::
    GHC.Show.Show a => GHC.Show.Show (CustomSet.CustomSet a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(U)),A,A)>m,
     Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun: @ a ($dShow :: GHC.Show.Show a).
                  @ (CustomSet.CustomSet a)
                  (CustomSet.$fShowCustomSet_$cshowsPrec @ a $dShow)
                  (CustomSet.$fShowCustomSet_$cshow @ a $dShow)
                  (CustomSet.$fShowCustomSet_$cshowList @ a $dShow) -}
2fc324b31ef87c69195b394bab97d19d
  $fShowCustomSet1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
cd9cac5c26687633bf56f8f0751268e9
  $fShowCustomSet_$cshow ::
    GHC.Show.Show a => CustomSet.CustomSet a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(U)),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: CustomSet.CustomSet a) ->
                 CustomSet.$fShowCustomSet_$cshowsPrec
                   @ a
                   $dShow
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
cd9cac5c26687633bf56f8f0751268e9
  $fShowCustomSet_$cshowList ::
    GHC.Show.Show a => [CustomSet.CustomSet a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (eta :: [CustomSet.CustomSet a])
                   (eta1 :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (CustomSet.CustomSet a)
                   (CustomSet.$fShowCustomSet_$cshowsPrec
                      @ a
                      $dShow
                      CustomSet.$fShowCustomSet1)
                   eta
                   eta1) -}
cd9cac5c26687633bf56f8f0751268e9
  $fShowCustomSet_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> CustomSet.CustomSet a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(U)),A,A)><L,1*U(U)><S,1*U> -}
42d23b00eb48f346a58f0f76bef724c2
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   752411557053049516##
                   10203999069793666621##
                   CustomSet.$trModule
                   CustomSet.$tc'Empty1) -}
60ede5926331f46040d0c58d0e3e700a
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
00af98b2c25a6700d8cad82775f0b46f
  $tc'Item :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12477673162370040211##
                   17978845493949272764##
                   CustomSet.$trModule
                   CustomSet.$tc'Item1) -}
3530cb19db27cfbe718b2f9925127927
  $tc'Item1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Item"#) -}
8da193ca795ed6eb608b56bfc3a4824c
  $tcCustomSet :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9392087005045514639##
                   819264318827235883##
                   CustomSet.$trModule
                   CustomSet.$trModule1) -}
f266dd42e6a327f0cc43029c7840662a
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   CustomSet.$trModule2
                   CustomSet.$trModule1) -}
b7f45fec5504e80ef430734280b21785
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "CustomSet"#) -}
adb74ba2c33c2999d7ad6b8306b11952
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "custom-set-1.0.1.3-6xIZlkiF9PE72Wq5noTf24"#) -}
cd9cac5c26687633bf56f8f0751268e9
  data CustomSet a = Empty | Item a (CustomSet.CustomSet a)
d66f2f34513aa31d59bfce08028952b5
  delete ::
    GHC.Classes.Eq a =>
    a -> CustomSet.CustomSet a -> CustomSet.CustomSet a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: a)
                   (set :: CustomSet.CustomSet a) ->
                 CustomSet.fromList
                   @ a
                   (Data.OldList.\\
                      @ a
                      $dEq
                      (CustomSet.toList @ a $dEq set)
                      (GHC.Types.: @ a x (GHC.Types.[] @ a)))) -}
3eef64325220fda50ac9a66817cdbc49
  difference ::
    GHC.Classes.Eq a =>
    CustomSet.CustomSet a
    -> CustomSet.CustomSet a -> CustomSet.CustomSet a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (setA :: CustomSet.CustomSet a)
                   (setB :: CustomSet.CustomSet a) ->
                 CustomSet.fromList
                   @ a
                   (Data.OldList.\\
                      @ a
                      $dEq
                      (CustomSet.toList @ a $dEq setA)
                      (CustomSet.toList @ a $dEq setB))) -}
afba9e7cbc6284ad9a115653566bbd35
  empty :: CustomSet.CustomSet a
  {- HasNoCafRefs,
     Unfolding: InlineRule (0, True, True) CustomSet.Empty -}
f178b84f973584c092da4bf5c1b2f7f1
  fromList :: [a] -> CustomSet.CustomSet a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
2f5e60a5857765457728082fce8363ce
  insert ::
    GHC.Classes.Eq a =>
    a -> CustomSet.CustomSet a -> CustomSet.CustomSet a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><L,U><S,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (a1 :: a)
                   (set :: CustomSet.CustomSet a) ->
                 case CustomSet.member @ a $dEq a1 set of wild {
                   GHC.Types.False
                   -> CustomSet.fromList
                        @ a
                        (GHC.Types.: @ a a1 (CustomSet.toList @ a $dEq set))
                   GHC.Types.True -> set }) -}
fc400449df9c5e0b929e7aa3a61bafc1
  intersection ::
    GHC.Classes.Eq a =>
    CustomSet.CustomSet a
    -> CustomSet.CustomSet a -> CustomSet.CustomSet a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C(U)),A)><S,1*U><L,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (setA :: CustomSet.CustomSet a)
                   (setB :: CustomSet.CustomSet a) ->
                 CustomSet.fromList
                   @ a
                   (Data.OldList.intersectBy
                      @ a
                      (GHC.Classes.== @ a $dEq)
                      (CustomSet.toList @ a $dEq setA)
                      (CustomSet.toList @ a $dEq setB))) -}
c84c2465edb200323cca70984b0bde5b
  isDisjointFrom ::
    GHC.Classes.Eq a =>
    CustomSet.CustomSet a -> CustomSet.CustomSet a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U> -}
cd9cac5c26687633bf56f8f0751268e9
  isSubsetOf ::
    GHC.Classes.Eq a =>
    CustomSet.CustomSet a -> CustomSet.CustomSet a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><L,U> -}
12731f419f3291f44f0650e3446b3458
  member ::
    GHC.Classes.Eq a => a -> CustomSet.CustomSet a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><L,U><S,1*U> -}
06b0bbc97e9f2cf44052122fb788d97a
  null :: GHC.Classes.Eq a => CustomSet.CustomSet a -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (set :: CustomSet.CustomSet a) ->
                 CustomSet.$fEqCustomSet_$c== @ a $dEq set (CustomSet.Empty @ a)) -}
1941301d7d38b9e66fdc2601c7ed6097
  size :: GHC.Classes.Eq a => CustomSet.CustomSet a -> GHC.Types.Int
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dEq :: GHC.Classes.Eq a) (set :: CustomSet.CustomSet a) ->
                 case GHC.List.$wlenAcc
                        @ a
                        (CustomSet.toList @ a $dEq set)
                        0# of ww2 { DEFAULT ->
                 GHC.Types.I# ww2 }) -}
cd9cac5c26687633bf56f8f0751268e9
  toList :: GHC.Classes.Eq a => CustomSet.CustomSet a -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)><S,1*U> -}
4636580899e84361ec9229b62b93fc8c
  union ::
    GHC.Classes.Eq a =>
    CustomSet.CustomSet a
    -> CustomSet.CustomSet a -> CustomSet.CustomSet a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U(C(C(U)),A)><S,U><S,U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (setA :: CustomSet.CustomSet a)
                   (setB :: CustomSet.CustomSet a) ->
                 CustomSet.fromList
                   @ a
                   (GHC.Base.++
                      @ a
                      (CustomSet.toList
                         @ a
                         $dEq
                         (CustomSet.difference @ a $dEq setA setB))
                      (GHC.Base.++
                         @ a
                         (CustomSet.toList
                            @ a
                            $dEq
                            (CustomSet.difference @ a $dEq setB setA))
                         (CustomSet.toList
                            @ a
                            $dEq
                            (CustomSet.intersection @ a $dEq setA setB))))) -}
instance [safe] GHC.Classes.Eq [CustomSet.CustomSet]
  = CustomSet.$fEqCustomSet
instance [safe] GHC.Show.Show [CustomSet.CustomSet]
  = CustomSet.$fShowCustomSet
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

