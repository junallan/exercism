
==================== FINAL INTERFACE ====================
2017-01-02 18:56:20.1196015 UTC

interface robot-simulator-0.0.0-79MJmjNOAJrFZdnJ8m6hxz:Robot 8001
  interface hash: 7d3db563560c74c166fb28d6329bf570
  ABI hash: 1b84e9b9539f63f34d209aba854c0418
  export-list hash: aa8bfa7b838ffe8b3720d01552fcf24c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 01bffee402c99072b66b5a2d29157711
  sig of: Nothing
  used TH splices: False
  where
exports:
  Robot.bearing
  Robot.coordinates
  Robot.mkRobot
  Robot.simulate
  Robot.turnLeft
  Robot.turnRight
  Robot.Bearing{Robot.East Robot.North Robot.South Robot.West}
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Tuple 84c2bcc75b7a239341ae2f88cce9d8d7
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Num f0aed3315b3ed1b330b71fc4148a5581
import  -/  base-4.9.0.0:GHC.Show 0b5845243cb2ec62b57dd6963d276ec6
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type bc99d7d6ca3e6f7b722927a29e227674
991205794f64808ca4867c318f5a3e5a
  $fEqBearing :: GHC.Classes.Eq Robot.Bearing
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Robot.Bearing Robot.$fEqBearing_$c== Robot.$fEqBearing_$c/= -}
991205794f64808ca4867c318f5a3e5a
  $fEqBearing_$c/= ::
    Robot.Bearing -> Robot.Bearing -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Robot.Bearing) (b :: Robot.Bearing) ->
                 case a of wild {
                   Robot.North
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Robot.North -> GHC.Types.False }
                   Robot.East
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Robot.East -> GHC.Types.False }
                   Robot.South
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Robot.South -> GHC.Types.False }
                   Robot.West
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True Robot.West -> GHC.Types.False } }) -}
991205794f64808ca4867c318f5a3e5a
  $fEqBearing_$c== ::
    Robot.Bearing -> Robot.Bearing -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Robot.Bearing) (ds1 :: Robot.Bearing) ->
                 case ds of wild {
                   Robot.North
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Robot.North -> GHC.Types.True }
                   Robot.East
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Robot.East -> GHC.Types.True }
                   Robot.South
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Robot.South -> GHC.Types.True }
                   Robot.West
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Robot.West -> GHC.Types.True } }) -}
991205794f64808ca4867c318f5a3e5a
  $fShowBearing :: GHC.Show.Show Robot.Bearing
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ Robot.Bearing
                  Robot.$fShowBearing_$cshowsPrec
                  Robot.$fShowBearing_$cshow
                  Robot.$fShowBearing_$cshowList -}
3862a79ff1c4fa527654fa8f0c415527
  $fShowBearing1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "West"#) -}
f1714b622d3ce78c24bf7ae2d428c9b2
  $fShowBearing2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "South"#) -}
186eefaa1e0393a6d55b3864d45dcaa0
  $fShowBearing3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "East"#) -}
8fb47b9782f853d3efd320a19f1085e4
  $fShowBearing4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "North"#) -}
991205794f64808ca4867c318f5a3e5a
  $fShowBearing_$cshow :: Robot.Bearing -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: Robot.Bearing) ->
                 Robot.$fShowBearing_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
991205794f64808ca4867c318f5a3e5a
  $fShowBearing_$cshowList :: [Robot.Bearing] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ Robot.Bearing
                   Robot.$w$cshowsPrec) -}
991205794f64808ca4867c318f5a3e5a
  $fShowBearing_$cshowsPrec ::
    GHC.Types.Int -> Robot.Bearing -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Robot.Bearing)
                   (w2 :: GHC.Base.String) ->
                 Robot.$w$cshowsPrec w1 w2) -}
1bc3926681a6c953d0ea70fe89189a83
  $tc'East :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2036594324523661238##
                   8205369399890290529##
                   Robot.$trModule
                   Robot.$tc'East1) -}
bfcc6c4513b0d838c840bbfd3df3d3af
  $tc'East1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'East"#) -}
216507a2d8d2f6c15a52f43d59ed9b5d
  $tc'North :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8884656949840914961##
                   13876474127711783386##
                   Robot.$trModule
                   Robot.$tc'North1) -}
393975551115d13cf6f6825d0631beab
  $tc'North1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'North"#) -}
ffd702b5b864be005f5a500667cb313c
  $tc'Robot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14534099426051962725##
                   17515089489387424272##
                   Robot.$trModule
                   Robot.$tc'Robot1) -}
9409b0272bbd69d01d81c6980787ec35
  $tc'Robot1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Robot"#) -}
320d8c61b608d012d91139223d568c34
  $tc'South :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7666859225662738032##
                   16087298677061867780##
                   Robot.$trModule
                   Robot.$tc'South1) -}
fbf2a9cb245ead6308100e54326a4050
  $tc'South1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'South"#) -}
95036e63025ba9954a201f1fc6a4c7a6
  $tc'West :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16857620254330474354##
                   663995758436728311##
                   Robot.$trModule
                   Robot.$tc'West1) -}
0d73994aef516fe4d9f233255ab8ed35
  $tc'West1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'West"#) -}
e14814db552ff3faa486245781b9037e
  $tcBearing :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4556434439833273808##
                   2696599136707148865##
                   Robot.$trModule
                   Robot.$tcBearing1) -}
097178ec91b2a9166557358aa9ce1fb2
  $tcBearing1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Bearing"#) -}
1d1463791d3e4ecbbb0ec0d9c22cf81c
  $tcRobot :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5207747574848988824##
                   15313063456705825474##
                   Robot.$trModule
                   Robot.$trModule1) -}
652377c1097e1b3e15a979860213788f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Robot.$trModule2 Robot.$trModule1) -}
18c7c3e6c186e6b0aac33a5040cd0b5b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Robot"#) -}
b281cd39a1ad064950db1aa1fced2ff5
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "robot-simulator-0.0.0-79MJmjNOAJrFZdnJ8m6hxz"#) -}
991205794f64808ca4867c318f5a3e5a
  $w$cshowsPrec ::
    Robot.Bearing -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: Robot.Bearing) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   Robot.North -> GHC.Base.++ @ GHC.Types.Char Robot.$fShowBearing4 w1
                   Robot.East -> GHC.Base.++ @ GHC.Types.Char Robot.$fShowBearing3 w1
                   Robot.South -> GHC.Base.++ @ GHC.Types.Char Robot.$fShowBearing2 w1
                   Robot.West
                   -> GHC.Base.++ @ GHC.Types.Char Robot.$fShowBearing1 w1 }) -}
030b557a8b0f02c8eb61cbbd68efde99
  $wsimulate ::
    Robot.Bearing
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> GHC.Base.String
    -> (# Robot.Bearing,
          (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer) #)
  {- Arity: 3, Strictness: <L,U><L,U(U,U)><S,1*U>, Inline: [0] -}
991205794f64808ca4867c318f5a3e5a
  data Bearing = North | East | South | West
c12bd4e5e2e393f8b42bde3a0eca986d
  data Robot
    = Robot Robot.Bearing
            (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
319d7f264cca1477a2c25346c41bb782
  bearing :: Robot.Robot -> Robot.Bearing
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Robot.Robot) ->
                 case ds of wild { Robot.Robot direction ds1 -> direction }) -}
c0988c72abae005e94a3faa7f3d8ab31
  coordinates ::
    Robot.Robot -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Robot.Robot) ->
                 case ds of wild { Robot.Robot ds1 coords -> coords }) -}
d98cb51740a36d2c78d3802c19db93ae
  mkRobot ::
    Robot.Bearing
    -> (GHC.Integer.Type.Integer, GHC.Integer.Type.Integer)
    -> Robot.Robot
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,U>m,
     Unfolding: InlineRule (0, True, True) Robot.Robot -}
34f7ca6a595eec01f4e88e82b242b32a
  simulate :: Robot.Robot -> GHC.Base.String -> Robot.Robot
  {- Arity: 2, Strictness: <S,1*U(U,U(U,U))><S,1*U>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Robot.Robot) (w1 :: GHC.Base.String) ->
                 case w of ww { Robot.Robot ww1 ww2 ->
                 case Robot.$wsimulate ww1 ww2 w1 of ww3 { (#,#) ww4 ww5 ->
                 Robot.Robot ww4 ww5 } }) -}
bab5339db375683fd1c57e8ea97b2388
  turnLeft :: Robot.Bearing -> Robot.Bearing
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (direction :: Robot.Bearing) ->
                 case direction of wild {
                   Robot.North -> Robot.West
                   Robot.East -> Robot.North
                   Robot.South -> Robot.East
                   Robot.West -> Robot.South }) -}
199047492d4d8edeee11f681933c5ae1
  turnRight :: Robot.Bearing -> Robot.Bearing
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (direction :: Robot.Bearing) ->
                 case direction of wild {
                   Robot.North -> Robot.East
                   Robot.East -> Robot.South
                   Robot.South -> Robot.West
                   Robot.West -> Robot.North }) -}
instance [safe] GHC.Classes.Eq [Robot.Bearing] = Robot.$fEqBearing
instance [safe] GHC.Show.Show [Robot.Bearing] = Robot.$fShowBearing
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

