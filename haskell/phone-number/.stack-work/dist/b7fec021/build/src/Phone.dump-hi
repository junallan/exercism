
==================== FINAL INTERFACE ====================
2016-12-27 20:48:47.2980714 UTC

interface phone-number-0.0.0-75gpB5J084pGrWiAUAjrh7:Phone 8001
  interface hash: 76f6146dfc3f9ef3ebb1d42c55f4bf76
  ABI hash: fdbd5e3d17f5eef0909436de068d9baa
  export-list hash: 68a8d5a045d57e7e4279d722395ad7b0
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 01bffee402c99072b66b5a2d29157711
  sig of: Nothing
  used TH splices: False
  where
exports:
  Phone.areaCode
  Phone.number
  Phone.prettyPrint
module dependencies:
package dependencies: base-4.9.0.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.0.0:GHC.Base base-4.9.0.0:GHC.Float
family instance modules: base-4.9.0.0:Control.Applicative
                         base-4.9.0.0:Data.Either base-4.9.0.0:Data.Functor.Const
                         base-4.9.0.0:Data.Monoid base-4.9.0.0:Data.Type.Equality
                         base-4.9.0.0:GHC.Generics base-4.9.0.0:GHC.IO.Exception
                         base-4.9.0.0:GHC.TypeLits
import  -/  base-4.9.0.0:Data.Char 793b969914b1622fef8ab278ed0a2b7f
import  -/  base-4.9.0.0:Data.Foldable 3cbed01c922be29649c33015287c82ca
import  -/  base-4.9.0.0:Data.Maybe 086a84053ef7f7810663b5f03b7ec3f7
import  -/  base-4.9.0.0:Data.Tuple 84c2bcc75b7a239341ae2f88cce9d8d7
import  -/  base-4.9.0.0:GHC.Base dd8044a8d640eee51828c17c476a6ba7
import  -/  base-4.9.0.0:GHC.List 47d436dfb7454bb1883fb4d943e3f389
import  -/  base-4.9.0.0:GHC.Unicode 01f7a6469be023f2c0f9e458d1a0270d
import  -/  base-4.9.0.0:Prelude 2d9cd8b0ec3d728f62b734df888d2e34
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
0f38e9f93d7e073c87b343e6467e067d
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Phone.$trModule2 Phone.$trModule1) -}
0f0c2c747d45ae23630291c608d4c625
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Phone"#) -}
7144104bbc3f3efb71c9b1ee401689e6
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "phone-number-0.0.0-75gpB5J084pGrWiAUAjrh7"#) -}
9fbd8ccd46903e1b8f4612ac8f013711
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
526d0e357a2203940bb637872bcc7e74
  $wunsafeDrop1 :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
cd07eb2e2f85b689ce2165ebe50d0374
  areaCode :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (phoneNumber :: GHC.Base.String) ->
                 case Phone.number phoneNumber of wild {
                   GHC.Base.Nothing -> GHC.Base.Nothing @ GHC.Base.String
                   GHC.Base.Just ipv
                   -> GHC.Base.Just
                        @ [GHC.Types.Char]
                        (GHC.List.$wunsafeTake @ GHC.Types.Char 3# ipv) }) -}
6f6e49226c47c1d9ba4929aa5b001962
  number :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (phoneNumber :: GHC.Base.String) ->
                 let {
                   phoneNumDigits :: GHC.Base.String
                   = GHC.List.filter @ GHC.Types.Char GHC.Unicode.isDigit phoneNumber
                 } in
                 case GHC.List.$wlenAcc @ GHC.Types.Char phoneNumDigits 0# of ww2 {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Base.String
                   10# -> GHC.Base.Just @ GHC.Base.String phoneNumDigits
                   11#
                   -> case GHC.Base.eqString
                             (GHC.List.$wunsafeTake @ GHC.Types.Char 1# phoneNumDigits)
                             Phone.number1 of wild {
                        GHC.Types.False -> GHC.Base.Nothing @ GHC.Base.String
                        GHC.Types.True
                        -> GHC.Base.Just
                             @ [GHC.Types.Char]
                             (Phone.$wunsafeDrop @ GHC.Types.Char 1# phoneNumDigits) } }) -}
d8db3ebdaeb6586233bf0e271ae7159b
  number1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "1"#) -}
49c8a3a03558d1327fdaf6370bacbc71
  prettyPrint :: GHC.Base.String -> GHC.Base.Maybe GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (phoneNumber :: GHC.Base.String) ->
                 case Phone.number phoneNumber of wild {
                   GHC.Base.Nothing
                   -> case Data.Maybe.fromJust1
                      ret_ty (GHC.Base.Maybe GHC.Base.String)
                      of {}
                   GHC.Base.Just x
                   -> case GHC.List.$wlenAcc @ GHC.Types.Char x 0# of ww2 {
                        DEFAULT -> GHC.Base.Nothing @ GHC.Base.String
                        10#
                        -> GHC.Base.Just
                             @ [GHC.Types.Char]
                             (GHC.CString.unpackAppendCString#
                                "("#
                                (case Phone.number x of wild1 {
                                   GHC.Base.Nothing
                                   -> case Data.Maybe.fromJust1 ret_ty [GHC.Types.Char] of {}
                                   GHC.Base.Just ipv
                                   -> GHC.Base.++
                                        @ GHC.Types.Char
                                        (GHC.List.$wunsafeTake @ GHC.Types.Char 3# ipv)
                                        (GHC.CString.unpackAppendCString#
                                           ") "#
                                           (case Phone.$wunsafeDrop1
                                                   @ GHC.Types.Char
                                                   3#
                                                   x of wild2 {
                                              [] -> Phone.prettyPrint1
                                              : ipv1 ipv2
                                              -> let {
                                                   ds2 :: ([GHC.Types.Char], [GHC.Types.Char])
                                                   = case GHC.List.splitAt_$s$wsplitAt'
                                                            @ GHC.Types.Char
                                                            ipv2
                                                            2# of ww { (#,#) ww1 ww4 ->
                                                     (ww1, ww4) }
                                                 } in
                                                 GHC.Base.++
                                                   @ GHC.Types.Char
                                                   (GHC.Types.:
                                                      @ GHC.Types.Char
                                                      ipv1
                                                      (case ds2 of wild3 { (,) xs' xs'' -> xs' }))
                                                   (GHC.CString.unpackAppendCString#
                                                      "-"#
                                                      (case ds2 of wild3 { (,) xs' xs'' ->
                                                       xs'' })) })) })) } }) -}
ab3117757089005e3997c9534986e4e7
  prettyPrint1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.Types.[] @ GHC.Types.Char)
                   Phone.prettyPrint2) -}
e55d486a48e0e67cbd8eb6f0f6a5d9dc
  prettyPrint2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackAppendCString#
                   "-"#
                   (GHC.Types.[] @ GHC.Types.Char)) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

