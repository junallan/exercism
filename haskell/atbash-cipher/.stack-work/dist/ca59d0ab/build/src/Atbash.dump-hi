
==================== FINAL INTERFACE ====================
2017-05-06 20:28:19.8921778 UTC

interface atbash-cipher-0.0.0-K1AnLZmYkbn9CADxZLO7M7:Atbash 8002
  interface hash: 5e7f29cabd90980438bd7d835be26f56
  ABI hash: 5f1752e6694112c2fc2b73adf942fc43
  export-list hash: 43544f50a2a7f674d19616c61bd12c2a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 50be09f6ae5701bb586bc6db9bc9ce26
  sig of: Nothing
  used TH splices: False
  where
exports:
  Atbash.decode
  Atbash.encode
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
                      split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Char c49b58282af11503cc838e1052cf6b83
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.Maybe ecf0c6f81372d9b58b142d5e758ea51b
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Unicode 7b64ed854a326c2c5bb224f237ed4a0b
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split c60198a427bfd51d9fb4562c059ec1d2
import  -/  split-0.2.3.1@split-0.2.3.1-FWyXC6nhV0H3AfM8IzrEFk:Data.List.Split.Internals 84db683b1ee25db1d6015fdde5c02e7c
5cac1d79708915ad4b0d0b909c70e348
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Atbash.$trModule2
                   Atbash.$trModule1) -}
a70bc85efea5ffb640135975a09a4506
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Atbash"#) -}
dfea5dc6c8f5a1eaa17f691293abebed
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "atbash-cipher-0.0.0-K1AnLZmYkbn9CADxZLO7M7"#) -}
b04b3d2492ff0aacb62491b7155e6a86
  decode :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (cipherText :: GHC.Base.String) ->
                 Data.Maybe.catMaybes1
                   @ GHC.Types.Char
                   (GHC.Base.build
                      @ (GHC.Base.Maybe GHC.Types.Char)
                      (\ @ b1
                         (c :: GHC.Base.Maybe GHC.Types.Char -> b1 -> b1)[OneShot]
                         (n :: b1)[OneShot] ->
                       GHC.Base.foldr
                         @ GHC.Types.Char
                         @ b1
                         (GHC.Base.mapFB
                            @ (GHC.Base.Maybe GHC.Types.Char)
                            @ b1
                            @ GHC.Types.Char
                            c
                            Atbash.decode1)
                         n
                         cipherText))) -}
c53d752c3903603b42f342726fc8bb92
  decode1 :: GHC.Types.Char -> GHC.Base.Maybe GHC.Types.Char
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: GHC.Types.Char) ->
                 GHC.List.lookup
                   @ GHC.Types.Char
                   @ GHC.Types.Char
                   GHC.Classes.$fEqChar
                   (GHC.Unicode.toLower x)
                   Atbash.decode2) -}
db6c1a01bca408f22163d9a4890744e8
  decode2 :: [(GHC.Types.Char, GHC.Types.Char)]
  {- Unfolding: (Atbash.decode_go
                   Atbash.decode_characters
                   Atbash.decode3) -}
99cfc1da7be51d33914afcfd7fddd0ab
  decode3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.List.reverse1
                   @ GHC.Types.Char
                   Atbash.decode_characters
                   (GHC.Types.[] @ GHC.Types.Char)) -}
33598839337e543f802803634c947c16
  decode_characters :: [GHC.Types.Char]
  {- Unfolding: (GHC.Enum.eftChar 97# 122#) -}
a24894185450eeb8e4e234aa3a6b652f
  decode_go ::
    [GHC.Types.Char]
    -> [GHC.Types.Char] -> [(GHC.Types.Char, GHC.Types.Char)]
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
5b8c1a8c4acd15793ae698872460bab8
  encode :: GHC.Base.String -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (plainText :: GHC.Base.String) ->
                 Atbash.encode_go1
                   (Atbash.encode_go
                      (Data.List.Split.Internals.chunksOf
                         @ GHC.Types.Char
                         Atbash.encode1
                         (Data.Maybe.catMaybes1
                            @ GHC.Types.Char
                            (GHC.Base.map
                               @ GHC.Types.Char
                               @ (GHC.Base.Maybe GHC.Types.Char)
                               Atbash.decode1
                               plainText))))) -}
2f42303fe8251d0d0133d022df8be609
  encode1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 5#) -}
003d1e72b4c437ed266f185c8c8c6625
  encode_go :: [[GHC.Types.Char]] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
207056fbb1c79f37f8863e651ee40f0a
  encode_go1 :: [GHC.Types.Char] -> [GHC.Types.Char]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

