
==================== FINAL INTERFACE ====================
2017-04-05 12:23:30.5615012 UTC

interface pythagorean-triplet-0.0.0-1rY5kCfBg0UFPvIf34KHRM:Triplet 8002
  interface hash: 1c82798ec85767f6f2b4e80153acae1f
  ABI hash: d5364ac2cf205287c03859544dfcbc52
  export-list hash: 265fa01d1c6e92103341fa726ee31873
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 50be09f6ae5701bb586bc6db9bc9ce26
  sig of: Nothing
  used TH splices: False
  where
exports:
  Triplet.isPythagorean
  Triplet.mkTriplet
  Triplet.pythagoreanTriplets
module dependencies:
package dependencies: OneTuple-0.2.1@OneTuple-0.2.1-7xFCZYYP3bD3K0JO3QlNLg
                      base-4.9.1.0* ghc-prim-0.5.0.0 integer-gmp-1.0.0.1
                      tuple-0.3.0.2@tuple-0.3.0.2-fw19c2mVE4S4kTOAA0LW
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.List 7349774f430841349c90dfd1144aea97
import  -/  base-4.9.1.0:Data.OldList c9282ee91951bdcbd918d2960562c007
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:GHC.Real b88ae4a48c079652623073a5bbf5c9b0
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Classes 16d48e012d23eaef9bca91ccdd572c02
import  -/  tuple-0.3.0.2@tuple-0.3.0.2-fw19c2mVE4S4kTOAA0LW:Data.Tuple.Select e4eb2203094a0baf00bf46f2a2409b33
6469f57dcf165017194856a80e24dc84
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   Triplet.$trModule2
                   Triplet.$trModule1) -}
4904e51402ba7bec47d666315531c42d
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Triplet"#) -}
e94130bad6fbafbf480e2364266345c3
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "pythagorean-triplet-0.0.0-1rY5kCfBg0UFPvIf34KHRM"#) -}
fcc2ac1ab9e0ca4456c80879e8de0c88
  $wpythagoreanTriplets ::
    GHC.Prim.Int#
    -> GHC.Prim.Int# -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.># ww ww1) of wild {
                   GHC.Types.False
                   -> let {
                        lvl :: [GHC.Types.Int] = GHC.Enum.eftInt ww ww1
                      } in
                      letrec {
                        go :: GHC.Prim.Int#
                              -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                          {- Arity: 1, Strictness: <S,U> -}
                        = \ (x :: GHC.Prim.Int#) ->
                          let {
                            ds :: GHC.Types.Int {- Strictness: m -} = GHC.Types.I# x
                          } in
                          let {
                            lvl1 :: GHC.Prim.Int# = GHC.Prim.*# x x
                          } in
                          let {
                            z :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                            = case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.==# x ww1) of wild1 {
                                GHC.Types.False -> go (GHC.Prim.+# x 1#)
                                GHC.Types.True
                                -> GHC.Types.[] @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int) }
                          } in
                          letrec {
                            go1 :: [GHC.Types.Int]
                                   -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                              {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds1 :: [GHC.Types.Int]) ->
                              case ds1 of wild1 {
                                [] -> z
                                : y ys
                                -> let {
                                     lvl2 :: GHC.Types.Int
                                     = case y of wild2 { GHC.Types.I# x1 ->
                                       GHC.Types.I# (GHC.Prim.+# lvl1 (GHC.Prim.*# x1 x1)) }
                                   } in
                                   let {
                                     lvl3 :: GHC.Types.Bool
                                     = case y of wild2 { GHC.Types.I# y1 ->
                                       GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<# x y1) }
                                   } in
                                   let {
                                     z1 :: [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)] = go1 ys
                                   } in
                                   letrec {
                                     go2 :: [GHC.Types.Int]
                                            -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
                                       {- Arity: 1, Strictness: <S,1*U> -}
                                     = \ (ds2 :: [GHC.Types.Int]) ->
                                       case ds2 of wild2 {
                                         [] -> z1
                                         : y1 ys1
                                         -> case lvl2 of wild3 { GHC.Types.I# x1 ->
                                            case y1 of wild4 { GHC.Types.I# x2 ->
                                            case GHC.Prim.tagToEnum#
                                                   @ GHC.Types.Bool
                                                   (GHC.Prim.==# x1 (GHC.Prim.*# x2 x2)) of wild5 {
                                              GHC.Types.False -> go2 ys1
                                              GHC.Types.True
                                              -> case lvl3 of wild6 {
                                                   GHC.Types.False -> go2 ys1
                                                   GHC.Types.True
                                                   -> case y of wild7 { GHC.Types.I# x3 ->
                                                      case GHC.Prim.tagToEnum#
                                                             @ GHC.Types.Bool
                                                             (GHC.Prim.<# x3 x2) of wild8 {
                                                        GHC.Types.False -> go2 ys1
                                                        GHC.Types.True
                                                        -> GHC.Types.:
                                                             @ (GHC.Types.Int, GHC.Types.Int,
                                                                GHC.Types.Int)
                                                             (ds, wild7, wild4)
                                                             (go2 ys1) } } } } } } }
                                   } in
                                   go2 lvl }
                          } in
                          go1 lvl
                      } in
                      go ww
                   GHC.Types.True
                   -> GHC.Types.[]
                        @ (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int) }) -}
4453fdf85315be3e41252266cc710937
  isPythagorean ::
    (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int) -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S)S(S)S(S)),1*U(1*U(U),1*U(U),1*U(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (triplet :: (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)) ->
                 case triplet of wild { (,,) x ds1 ds2 ->
                 case x of wild1 { GHC.Types.I# x1 ->
                 case ds1 of wild2 { GHC.Types.I# x2 ->
                 case ds2 of wild3 { GHC.Types.I# x3 ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.==#
                      (GHC.Prim.+# (GHC.Prim.*# x1 x1) (GHC.Prim.*# x2 x2))
                      (GHC.Prim.*# x3 x3)) } } } }) -}
d742a3a32e004db4e344cdfc03f38c19
  mkTriplet ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)
  {- Arity: 3, Strictness: <L,U><L,U><L,U>m, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: GHC.Types.Int) ->
                 let {
                   orderedValues :: [GHC.Types.Int]
                   = Data.OldList.sortBy
                       @ GHC.Types.Int
                       GHC.Classes.compareInt
                       (GHC.Types.:
                          @ GHC.Types.Int
                          w
                          (GHC.Types.:
                             @ GHC.Types.Int
                             w1
                             (GHC.Types.: @ GHC.Types.Int w2 (GHC.Types.[] @ GHC.Types.Int))))
                 } in
                 (GHC.List.$w!! @ GHC.Types.Int orderedValues 0#,
                  GHC.List.$w!! @ GHC.Types.Int orderedValues 1#,
                  GHC.List.$w!! @ GHC.Types.Int orderedValues 2#)) -}
93af3cfbd01f2280161974210b6ac129
  pythagoreanTriplets ::
    GHC.Types.Int
    -> GHC.Types.Int -> [(GHC.Types.Int, GHC.Types.Int, GHC.Types.Int)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { GHC.Types.I# ww3 ->
                 Triplet.$wpythagoreanTriplets ww1 ww3 } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

