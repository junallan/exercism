
==================== FINAL INTERFACE ====================
2017-11-13 21:32:55.2108241 UTC

interface linked-list-0.1.0.2-ImzxICclSRqHd0tpdWlaGY:Deque 8002
  interface hash: fcdec52ec077c13b65e28672f0c1946c
  ABI hash: 783c4f1da84e769c0cd0e348f7e097e0
  export-list hash: ae05049fe256bd7ae980a38a42933f63
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 50be09f6ae5701bb586bc6db9bc9ce26
  sig of: Nothing
  used TH splices: False
  where
exports:
  Deque.mkDeque
  Deque.pop
  Deque.push
  Deque.shift
  Deque.unshift
  Deque.Deque
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 254e836c2d813d34e47feb29bb8d40ed
import  -/  base-4.9.1.0:Data.IORef c73d02c54df09a5b747108a87da60f73
import  -/  base-4.9.1.0:GHC.Base 4caea1123ecf4b46e27cbccd6d279377
import  -/  base-4.9.1.0:GHC.IORef b977a2a1741af520d9defa4a879c1ccf
import  -/  base-4.9.1.0:GHC.List d11eb227c1c6fbfd89bb781d72eaea0d
import  -/  base-4.9.1.0:GHC.Num 38b8aac8807c096c7f3ca3c1eff02939
import  -/  base-4.9.1.0:Prelude 74b3e204395920329f6de9d97206abe9
import  -/  ghc-prim-0.5.0.0:GHC.Types 89f8de4f08018c9177c98d979eae0e45
63fcc81f669e6cb51ace204b88b7bbc5
  $tc'Deque :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16965014779916985164##
                   8843846704572504664##
                   Deque.$trModule
                   Deque.$tc'Deque1) -}
8bcec70ac1310cceaba3f93eeed99122
  $tc'Deque1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Deque"#) -}
01ff5dced0fe1f3591e78af37cdf11b3
  $tcDeque :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1205276530204024975##
                   2172567695059251750##
                   Deque.$trModule
                   Deque.$trModule1) -}
e6a80647a5b2f50e4f15b046d7f4d083
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Deque.$trModule2 Deque.$trModule1) -}
5fed3d34a7f01e74c6016df67974ff02
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Deque"#) -}
5e8d22872439a9f948d4b462f55174bf
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "linked-list-0.1.0.2-ImzxICclSRqHd0tpdWlaGY"#) -}
7a6d58625193ef65083a9b0f3fa91822
  $wpop ::
    GHC.Prim.MutVar# GHC.Prim.RealWorld [a]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ @ a
                   (ww :: GHC.Prim.MutVar# GHC.Prim.RealWorld [a])
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ [a]
                        ww
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   [] -> (# ipv, GHC.Base.Nothing @ a #)
                   : ds2 ds3
                   -> case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ [a]
                             ww
                             (case GHC.List.$wlenAcc @ a wild 0# of ww2 { DEFAULT ->
                              let {
                                y :: GHC.Prim.Int# = GHC.Prim.-# ww2 1#
                              } in
                              case GHC.Prim.tagToEnum#
                                     @ GHC.Types.Bool
                                     (GHC.Prim.<# 0# y) of wild1 {
                                GHC.Types.False -> GHC.Types.[] @ a
                                GHC.Types.True -> GHC.List.$wunsafeTake @ a y wild } })
                             ipv of s2# { DEFAULT ->
                      (# s2#,
                         GHC.Base.Just
                           @ a
                           (Deque.pop2 @ a wild (GHC.List.lastError @ a)) #) } } }) -}
1fabe75f3a1db7228ec4036f98af7fd5
  data Deque a = Deque (GHC.IORef.IORef [a])
0be7976b3267c5f35aa861ae1e439f9d
  mkDeque :: GHC.Types.IO (Deque.Deque a)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.mkDeque1
                  `cast`
                (forall (a :: <*>_N). Sym (GHC.Types.N:IO[0] <Deque.Deque a>_R)) -}
d5ef28273c0340357dc4d742f48e3b87
  mkDeque1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Deque.Deque a #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case GHC.Prim.newMutVar#
                        @ [a]
                        @ GHC.Prim.RealWorld
                        (GHC.Types.[] @ a)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    Deque.Deque
                      @ a
                      (GHC.STRef.STRef @ GHC.Prim.RealWorld @ [a] ipv1)
                        `cast`
                      (Sym (GHC.IORef.N:IORef[0]) <[a]>_N) #) }) -}
60a53ac9c593b71206c39535ca624a72
  pop :: Deque.Deque a -> GHC.Types.IO (GHC.Base.Maybe a)
  {- Arity: 2, Strictness: <S(S(S)),1*U(1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.pop1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.Deque a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R)) -}
b4351e25fd107accbbc679ee1d66adb6
  pop1 ::
    Deque.Deque a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
  {- Arity: 2, Strictness: <S(S(S)),1*U(1*U(U))><S,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (w :: Deque.Deque a)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case w of ww { Deque.Deque ww1 ->
                 case ww1
                        `cast`
                      (GHC.IORef.N:IORef[0] <[a]>_N) of ww2 { GHC.STRef.STRef ww3 ->
                 Deque.$wpop @ a ww3 w1 } }) -}
c921df95b8fac0b6de829d5b20684f53
  pop2 :: [a] -> a -> a
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
72d3a3ead382d8d0c22814b0c29e293a
  push :: Deque.Deque a -> a -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.push1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.Deque a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
ccf5176dcdb20e299269dfe2e57b9cd1
  push1 ::
    Deque.Deque a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: Deque.Deque a)
                   (val :: a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { Deque.Deque x ->
                 case x `cast`
                      (GHC.IORef.N:IORef[0] <[a]>_N) of wild1 { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ [a]
                        var#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ [a]
                        var#
                        (GHC.Base.augment
                           @ a
                           (\ @ b (c :: a -> b -> b)[OneShot] (n :: b)[OneShot] ->
                            GHC.Base.foldr @ a @ b c n ipv1)
                           (GHC.Types.: @ a val (GHC.Types.[] @ a)))
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } } }) -}
27750b8a6d97b2a320b7ca99d4cb3854
  shift :: Deque.Deque a -> GHC.Types.IO (GHC.Base.Maybe a)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S(S)),1*U(1*U(U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.shift1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.Deque a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe a>_R)) -}
c8019f137fb1babf4cd0ae279641c45e
  shift1 ::
    Deque.Deque a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, GHC.Base.Maybe a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S(S)),1*U(1*U(U))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (ds :: Deque.Deque a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { Deque.Deque x ->
                 case x `cast`
                      (GHC.IORef.N:IORef[0] <[a]>_N) of wild1 { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ [a]
                        var#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild2 {
                   [] -> (# ipv, GHC.Base.Nothing @ a #)
                   : ds2 ds3
                   -> case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ [a]
                             var#
                             ds3
                             ipv of s2# { DEFAULT ->
                      (# s2#, GHC.Base.Just @ a ds2 #) } } } } }) -}
9b2fb724e5f348d31194c475cc68496e
  unshift :: Deque.Deque a -> a -> GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><L,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Deque.unshift1
                  `cast`
                (forall (a :: <*>_N).
                 <Deque.Deque a>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
7b52f58806f957164c1c16fe235cc1bd
  unshift1 ::
    Deque.Deque a
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S(S)),1*U(1*U(U))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (ds :: Deque.Deque a)
                   (val :: a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case ds of wild { Deque.Deque x ->
                 case x `cast`
                      (GHC.IORef.N:IORef[0] <[a]>_N) of wild1 { GHC.STRef.STRef var# ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ [a]
                        var#
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ [a]
                        var#
                        (GHC.Types.: @ a val ipv1)
                        ipv of s2# { DEFAULT ->
                 (# s2#, GHC.Tuple.() #) } } } }) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

